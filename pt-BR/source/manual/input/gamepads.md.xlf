<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/input/gamepads.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Gamepads</source>
<target xml:lang="pt">Gamepads</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/></source>
<target xml:lang="pt"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en"><g id="1">Gamepads</g>, such as the Xbox Elite Wireless Controller and the PS4 DualShock, are popular input devices for consoles and desktop.</source>
<target xml:lang="pt"><g id="1">Gamepads</g>, such as the Xbox Elite Wireless Controller and the PS4 DualShock, are popular input devices for consoles and desktop.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
Stride is currently optimized for the Xbox Elite gamepad. Other controllers work, but might have unexpected button mappings. Gamepad-specific features like the PS4 DualShock touchpad aren't supported.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Stride is currently optimized for the Xbox Elite gamepad. Other controllers work, but might have unexpected button mappings. Gamepad-specific features like the PS4 DualShock touchpad aren't supported.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Digital and analog buttons</source>
<target xml:lang="pt">Digital and analog buttons</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><g id="1">Digital</g> buttons have two states: <g id="2">up</g> and <g id="3">down</g>. The D-pad, Start, Back, Thumbstick (press), A, B, X and Y buttons are digital buttons.</source>
<target xml:lang="pt"><g id="1">Digital</g> buttons have two states: <g id="2">up</g> and <g id="3">down</g>. The D-pad, Start, Back, Thumbstick (press), A, B, X and Y buttons are digital buttons.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en"><g id="1">Analog</g> buttons return a value depending on how hard the user presses. The triggers are analog buttons, and return a value between 0 and 1. The thumbsticks are also analog, and return values between -1 and 1 on the X and Y axes.</source>
<target xml:lang="pt"><g id="1">Analog</g> buttons return a value depending on how hard the user presses. The triggers are analog buttons, and return a value between 0 and 1. The thumbsticks are also analog, and return values between -1 and 1 on the X and Y axes.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">The Xbox Elite controller buttons have the following names in Stride:</source>
<target xml:lang="pt">The Xbox Elite controller buttons have the following names in Stride:</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Xbox gamepad<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Xbox gamepad<x id="2"/></target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Handle gamepad input</source>
<target xml:lang="pt">Handle gamepad input</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Check that gamepads are connected</source>
<target xml:lang="pt">Check that gamepads are connected</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Before handling gamepad input:</source>
<target xml:lang="pt">Before handling gamepad input:</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">To check if any gamepads are connected, use <g id="1">InputManager.HasGamePad</g>.</source>
<target xml:lang="pt">To check if any gamepads are connected, use <g id="1">InputManager.HasGamePad</g>.</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">To check how many gamepads are connected, use <g id="1">InputManager.GamePadCount</g>.</source>
<target xml:lang="pt">To check how many gamepads are connected, use <g id="1">InputManager.GamePadCount</g>.</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">To check if the current device has been disconnected, use the <g id="1">InputManager.DeviceRemoved</g> event.</source>
<target xml:lang="pt">To check if the current device has been disconnected, use the <g id="1">InputManager.DeviceRemoved</g> event.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">To check if a device has been connected, use the <g id="1">InputManager.DeviceAdded</g> event.</source>
<target xml:lang="pt">To check if a device has been connected, use the <g id="1">InputManager.DeviceAdded</g> event.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Digital buttons</source>
<target xml:lang="pt">Digital buttons</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">To query the states and state changes of digital gamepad buttons, on the <g id="1">GamePad</g> object, call:</source>
<target xml:lang="pt">To query the states and state changes of digital gamepad buttons, on the <g id="1">GamePad</g> object, call:</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">Method</source>
<target xml:lang="pt">Method</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">Functionality</source>
<target xml:lang="pt">Functionality</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en"><g id="1">IsButtonDown(IGamePadDevice, GamePadButton)</g></source>
<target xml:lang="pt"><g id="1">IsButtonDown(IGamePadDevice, GamePadButton)</g></target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">Checks whether the button is in the <g id="1">down</g> state.</source>
<target xml:lang="pt">Checks whether the button is in the <g id="1">down</g> state.</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en"><g id="1">IsButtonPressed(IGamePadDevice, GamePadButton)</g></source>
<target xml:lang="pt"><g id="1">IsButtonPressed(IGamePadDevice, GamePadButton)</g></target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">Checks whether the user has <g id="1">pressed</g> the button since the previous update.</source>
<target xml:lang="pt">Checks whether the user has <g id="1">pressed</g> the button since the previous update.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en"><g id="1">IsButtonReleased(IGamePadDevice, GamePadButton)</g></source>
<target xml:lang="pt"><g id="1">IsButtonReleased(IGamePadDevice, GamePadButton)</g></target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">Checks whether the user has <g id="1">released</g> the button since the previous update.</source>
<target xml:lang="pt">Checks whether the user has <g id="1">released</g> the button since the previous update.</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en"><g id="1">Button (GamePadButton)</g> is the gamepad button you want to check.</source>
<target xml:lang="pt"><g id="1">Button (GamePadButton)</g> is the gamepad button you want to check.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en">You can also get the state of digital buttons using <g id="1">GamePadState.Buttons</g>.</source>
<target xml:lang="pt">You can also get the state of digital buttons using <g id="1">GamePadState.Buttons</g>.</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
The <g id="3">GamePadState.Buttons</g> field is a bitmask that uses binary system. Depending on the bitmask value, you can determine which buttons are <g id="4">up</g> or <g id="5">down</g>.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
The <g id="3">GamePadState.Buttons</g> field is a bitmask that uses binary system. Depending on the bitmask value, you can determine which buttons are <g id="4">up</g> or <g id="5">down</g>.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">To get the gamepad state, use <g id="1">IGamePadDevice.State</g>.</source>
<target xml:lang="pt">To get the gamepad state, use <g id="1">IGamePadDevice.State</g>.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en">Analog buttons</source>
<target xml:lang="pt">Analog buttons</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en">To query values of analog buttons, first get the current state of gamepad using
<g id="1">GetGamePadByIndex(index)</g>, where <g id="2">index (Integer)</g> is the index of the gamepad you want to check.</source>
<target xml:lang="pt">To query values of analog buttons, first get the current state of gamepad using
<g id="1">GetGamePadByIndex(index)</g>, where <g id="2">index (Integer)</g> is the index of the gamepad you want to check.</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!WARNING<x id="2"/>
The value returned by <g id="3">IGamePadDevice.State</g> is the state of the gamepad at the <g id="4">current</g> update. You can't reuse this value for the next updates. You have to query it again in every update.</source>
<target xml:lang="pt"><x id="1"/>!WARNING<x id="2"/>
The value returned by <g id="3">IGamePadDevice.State</g> is the state of the gamepad at the <g id="4">current</g> update. You can't reuse this value for the next updates. You have to query it again in every update.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">To get trigger and thumbstick positions, use these
<g id="1">GamePadState</g> fields:</source>
<target xml:lang="pt">To get trigger and thumbstick positions, use these
<g id="1">GamePadState</g> fields:</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">Field</source>
<target xml:lang="pt">Field</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">Description</source>
<target xml:lang="pt">Description</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en"><g id="1">GamePadState.LeftThumb</g></source>
<target xml:lang="pt"><g id="1">GamePadState.LeftThumb</g></target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">Left thumbstick X-axis/Y-axis value in the range <x id="1"/>-1.0f, 1.0f<x id="2"/> for both axes.</source>
<target xml:lang="pt">Left thumbstick X-axis/Y-axis value in the range <x id="1"/>-1.0f, 1.0f<x id="2"/> for both axes.</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en"><g id="1">GamePadState.RightThumb</g></source>
<target xml:lang="pt"><g id="1">GamePadState.RightThumb</g></target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">Right thumbstick X-axis/Y-axis value in the range <x id="1"/>-1.0f, 1.0f<x id="2"/> for both axes.</source>
<target xml:lang="pt">Right thumbstick X-axis/Y-axis value in the range <x id="1"/>-1.0f, 1.0f<x id="2"/> for both axes.</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en"><g id="1">GamePadState.LeftTrigger</g></source>
<target xml:lang="pt"><g id="1">GamePadState.LeftTrigger</g></target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">Left trigger analog control value in the range <x id="1"/>0, 1.0f<x id="2"/> for a single axes.</source>
<target xml:lang="pt">Left trigger analog control value in the range <x id="1"/>0, 1.0f<x id="2"/> for a single axes.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en"><g id="1">GamePadState.RightTrigger</g></source>
<target xml:lang="pt"><g id="1">GamePadState.RightTrigger</g></target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en">Right trigger analog control value in the range <x id="1"/>0, 1.0f<x id="2"/> for a single axis.</source>
<target xml:lang="pt">Right trigger analog control value in the range <x id="1"/>0, 1.0f<x id="2"/> for a single axis.</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en">Thumbsticks move along the X and Y axes. Their positions read as follows:</source>
<target xml:lang="pt">Thumbsticks move along the X and Y axes. Their positions read as follows:</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Query thumb position<x id="2"/>
<x id="3"/>Query thumb position<x id="4"/></source>
<target xml:lang="pt"><x id="1"/>Query thumb position<x id="2"/>
<x id="3"/>Query thumb position<x id="4"/></target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">Triggers move along the X axis. Their positions read as follows:</source>
<target xml:lang="pt">Triggers move along the X axis. Their positions read as follows:</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Query trigger position<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Query trigger position<x id="2"/></target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">Vibration</source>
<target xml:lang="pt">Vibration</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">To set the gamepad vibration level, use <g id="1">IGamePadDevice.SetVibration</g>.</source>
<target xml:lang="pt">To set the gamepad vibration level, use <g id="1">IGamePadDevice.SetVibration</g>.</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
Stride currently only supports vibration for Xbox gamepads.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Stride currently only supports vibration for Xbox gamepads.</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">Example code</source>
<target xml:lang="pt">Example code</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">using Stride.Core.Mathematics;
using Stride.Engine;

public class TestScript : SyncScript
{
    public override void Update()
    {
        //Check if a gamepad is connected
        if (Input.HasGamePad)
        {
            //Get the number of connected gamepads
            int gamepadCount = Input.GamePadCount;

            // Check each gamepad's status
            foreach(var gamepad in Input.GamePads)
            {
                // Get the analog thumbstick positions
                Vector2 speed = gamepad.State.LeftThumb;
                Vector2 direction = gamepad.State.RightThumb;

                // Get the digital buttons' status
                if (gamepad.IsButtonDown(GamePadButton.X))
                {
                    // The action repeats for as long as the user holds the button down.
                    // This is useful for continuous actions such as firing a machine gun.
                }
                if (gamepad.IsButtonPressed(GamePadButton.A))
                {
                    // The action is triggered only once, even if the user holds the button down.
                    // This is useful for one-time actions such as jumping.
                }
            }
        }
    }
}
</source>
<target xml:lang="pt">using Stride.Core.Mathematics;
using Stride.Engine;

public class TestScript : SyncScript
{
    public override void Update()
    {
        //Check if a gamepad is connected
        if (Input.HasGamePad)
        {
            //Get the number of connected gamepads
            int gamepadCount = Input.GamePadCount;

            // Check each gamepad's status
            foreach(var gamepad in Input.GamePads)
            {
                // Get the analog thumbstick positions
                Vector2 speed = gamepad.State.LeftThumb;
                Vector2 direction = gamepad.State.RightThumb;

                // Get the digital buttons' status
                if (gamepad.IsButtonDown(GamePadButton.X))
                {
                    // The action repeats for as long as the user holds the button down.
                    // This is useful for continuous actions such as firing a machine gun.
                }
                if (gamepad.IsButtonPressed(GamePadButton.A))
                {
                    // The action is triggered only once, even if the user holds the button down.
                    // This is useful for one-time actions such as jumping.
                }
            }
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en"><g id="1">Keyboards</g></source>
<target xml:lang="pt"><g id="1">Keyboards</g></target>
</trans-unit>
<trans-unit id="tu56" xml:space="preserve">
<source xml:lang="en"><g id="1">Virtual buttons</g></source>
<target xml:lang="pt"><g id="1">Virtual buttons</g></target>
</trans-unit>
<trans-unit id="tu57" xml:space="preserve">
<source xml:lang="en"><g id="1">Input overview</g></source>
<target xml:lang="pt"><g id="1">Input overview</g></target>
</trans-unit>
</body>
</file>
</xliff>
