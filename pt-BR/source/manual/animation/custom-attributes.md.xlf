<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/animation/custom-attributes.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Custom attributes</source>
<target xml:lang="pt">Custom attributes</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Intermediate<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Intermediate<x id="2"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">You can import custom attributes created in modeling tools such as Maya.</source>
<target xml:lang="pt">You can import custom attributes created in modeling tools such as Maya.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Currently, you can only import custom <g id="1">animated</g> attributes. Attributes that aren't animated can't be imported.</source>
<target xml:lang="pt">Currently, you can only import custom <g id="1">animated</g> attributes. Attributes that aren't animated can't be imported.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Maya properties<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Maya properties<x id="2"/></target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">1. Import custom attributes</source>
<target xml:lang="pt">1. Import custom attributes</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">Import the animation. For instructions, see <g id="1">Import animations</g>.</source>
<target xml:lang="pt">Import the animation. For instructions, see <g id="1">Import animations</g>.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">In the <g id="1">Asset View</g>, select the animation asset.</source>
<target xml:lang="pt">In the <g id="1">Asset View</g>, select the animation asset.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Assets in Asset View<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Assets in Asset View<x id="2"/></target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">In the <g id="1">Property Grid</g>, select <g id="2">Import custom attributes</g>.</source>
<target xml:lang="pt">In the <g id="1">Property Grid</g>, select <g id="2">Import custom attributes</g>.</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Custom attributes<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Custom attributes<x id="2"/></target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">When the assets are built, Stride imports the custom attributes from the FBX file.</source>
<target xml:lang="pt">When the assets are built, Stride imports the custom attributes from the FBX file.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">2. Control custom attributes with a script</source>
<target xml:lang="pt">2. Control custom attributes with a script</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">Add a script to read the custom attributes and copy their value to another property. This can be a separate script, or part of another <g id="1">animation script</g>.</source>
<target xml:lang="pt">Add a script to read the custom attributes and copy their value to another property. This can be a separate script, or part of another <g id="1">animation script</g>.</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">To look up an attribute, use <g id="1">NodeName_AttributeName</g>. For example, if you have the node <g id="2">myNode</g> with the custom attribute <g id="3">myAttribute</g>, use <g id="4">myNode_myAttribute</g>.</source>
<target xml:lang="pt">To look up an attribute, use <g id="1">NodeName_AttributeName</g>. For example, if you have the node <g id="2">myNode</g> with the custom attribute <g id="3">myAttribute</g>, use <g id="4">myNode_myAttribute</g>.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">Example script</source>
<target xml:lang="pt">Example script</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">using Stride.Animations;
using Stride.Engine;
using Stride.Rendering;
using Stride.Audio;
using Stride.Rendering.Materials;
using System.Linq;

namespace Sample
{
    public class HologramScript : SyncScript
    {
        public Material MyMaterial;

        private AnimationComponent animationComponent;
        private AnimationProcessor animationProcessor;

        public override void Start()
        {
            base.Start();

            animationComponent = Entity.GetOrCreate&lt;AnimationComponent>();
            animationProcessor = SceneSystem.SceneInstance.Processors.OfType&lt;AnimationProcessor>().FirstOrDefault();
        }

        public override void Update()
        {
            if (animationProcessor == null || MyMaterial == null)
                return;

            // Animation result may be Null if animation hasn't been played yet.
            var animResult = animationProcessor.GetAnimationClipResult(animationComponent);
            if (animResult == null)
                return;

            // Read the value of the animated custom attribute:
            float emissiveIntensity = 0;
            unsafe
            {
                fixed (byte* structures = animResult.Data)
                {
                    foreach (var channel in animResult.Channels)
                    {
                        if (!channel.IsUserCustomProperty)
                            continue;

                        var structureData = (float*)(structures + channel.Offset);
                        var factor = *structureData++;
                        if (factor == 0.0f)
                            continue;

                        var value = *structureData;
                        if (channel.PropertyName == "myNode_myProperty")
                            emissiveIntensity = value;
                    }
                }
            }

            // Bind the material parameter:

            MyMaterial.Passes[0].Parameters.Set(MaterialKeys.EmissiveIntensity, emissiveIntensity);
        }
    }
}
</source>
<target xml:lang="pt">using Stride.Animations;
using Stride.Engine;
using Stride.Rendering;
using Stride.Audio;
using Stride.Rendering.Materials;
using System.Linq;

namespace Sample
{
    public class HologramScript : SyncScript
    {
        public Material MyMaterial;

        private AnimationComponent animationComponent;
        private AnimationProcessor animationProcessor;

        public override void Start()
        {
            base.Start();

            animationComponent = Entity.GetOrCreate&lt;AnimationComponent>();
            animationProcessor = SceneSystem.SceneInstance.Processors.OfType&lt;AnimationProcessor>().FirstOrDefault();
        }

        public override void Update()
        {
            if (animationProcessor == null || MyMaterial == null)
                return;

            // Animation result may be Null if animation hasn't been played yet.
            var animResult = animationProcessor.GetAnimationClipResult(animationComponent);
            if (animResult == null)
                return;

            // Read the value of the animated custom attribute:
            float emissiveIntensity = 0;
            unsafe
            {
                fixed (byte* structures = animResult.Data)
                {
                    foreach (var channel in animResult.Channels)
                    {
                        if (!channel.IsUserCustomProperty)
                            continue;

                        var structureData = (float*)(structures + channel.Offset);
                        var factor = *structureData++;
                        if (factor == 0.0f)
                            continue;

                        var value = *structureData;
                        if (channel.PropertyName == "myNode_myProperty")
                            emissiveIntensity = value;
                    }
                }
            }

            // Bind the material parameter:

            MyMaterial.Passes[0].Parameters.Set(MaterialKeys.EmissiveIntensity, emissiveIntensity);
        }
    }
}
</target>
</trans-unit>
</body>
</file>
</xliff>
