<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/stride-translations/pt-BR/source/manual/engine/entity-component-model/index.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">ECS (Entity Component System) Introduction</source>
<target xml:lang="pt">ECS (Entity Component System) Introduction</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Problem</source>
<target xml:lang="pt">Problem</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en"><g id="1">Dog</g> is a subclasses of <g id="2">Animal</g>.</source>
<target xml:lang="pt"><g id="1">Dog</g> is a subclasses of <g id="2">Animal</g>.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">This example is often used as an example of inheritance
in introductions to programming. However, when things get more complex,
we get problems:</source>
<target xml:lang="pt">This example is often used as an example of inheritance
in introductions to programming. However, when things get more complex,
we get problems:</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en"><g id="1">Dog</g> and <g id="2">Fish</g> can swim, so we create <g id="3">SwimmingAnimal</g> as a class in between</source>
<target xml:lang="pt"><g id="1">Dog</g> and <g id="2">Fish</g> can swim, so we create <g id="3">SwimmingAnimal</g> as a class in between</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><g id="1">Bee</g> and <g id="2">Bird</g> can fly, so we create <g id="3">FlyingAnimal</g></source>
<target xml:lang="pt"><g id="1">Bee</g> and <g id="2">Bird</g> can fly, so we create <g id="3">FlyingAnimal</g></target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">What do we now do with the <g id="1">Duck</g>, who can do both?</source>
<target xml:lang="pt">What do we now do with the <g id="1">Duck</g>, who can do both?</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">We have the exact same problem in video games.<x id="1"/>
Enemies can walk, shoot, fly - but not all of them can do everything.<x id="2"/>
Even something basic like hitpoints is not universal, as some enemies are indestructible.</source>
<target xml:lang="pt">We have the exact same problem in video games.<x id="1"/>
Enemies can walk, shoot, fly - but not all of them can do everything.<x id="2"/>
Even something basic like hitpoints is not universal, as some enemies are indestructible.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Solution</source>
<target xml:lang="pt">Solution</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Entity component system (ECS) is a software architectural pattern mostly used in video game development for the representation of game world objects. An ECS comprises entities composed from components of data, with systems which operate on entities' components.<x id="1"/>
<g id="2">-<g id="3">Wikipedia</g></g></source>
<target xml:lang="pt">Entity component system (ECS) is a software architectural pattern mostly used in video game development for the representation of game world objects. An ECS comprises entities composed from components of data, with systems which operate on entities' components.<x id="1"/>
<g id="2">-<g id="3">Wikipedia</g></g></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">The general idea of an ECS is that an <g id="1">entity</g> - an "object" in your virtual world -
does not really do anything. It is mostly just a "bag of components".</source>
<target xml:lang="pt">The general idea of an ECS is that an <g id="1">entity</g> - an "object" in your virtual world -
does not really do anything. It is mostly just a "bag of components".</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">The selection of components on an entity decides what it does.
An entity with a collider component can collide, an entity with a sound component can make a noise, etc.</source>
<target xml:lang="pt">The selection of components on an entity decides what it does.
An entity with a collider component can collide, an entity with a sound component can make a noise, etc.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">Differing opinions</source>
<target xml:lang="pt">Differing opinions</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">For the "System" part of the term, there are two interpretations:</source>
<target xml:lang="pt">For the "System" part of the term, there are two interpretations:</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">A) "Entity-and-Component System"<x id="1"/>
...in which the components contain the data they need, and also the functionality that works with that data.</source>
<target xml:lang="pt">A) "Entity-and-Component System"<x id="1"/>
...in which the components contain the data they need, and also the functionality that works with that data.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">B) "Entity, Component, System"<x id="1"/>
...in which a component only contains data, while a third part - the system -
contains the functionality.</source>
<target xml:lang="pt">B) "Entity, Component, System"<x id="1"/>
...in which a component only contains data, while a third part - the system -
contains the functionality.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Stride allows working in both ways. A) can be achieved by using
<g id="1">scripts</g>
while the usage of B) is described in this section of the manual.</source>
<target xml:lang="pt">Stride allows working in both ways. A) can be achieved by using
<g id="1">scripts</g>
while the usage of B) is described in this section of the manual.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">Which one to choose?</source>
<target xml:lang="pt">Which one to choose?</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/ecs-choice.jpg<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/ecs-choice.jpg<x id="2"/></target>
</trans-unit>
</body>
</file>
</xliff>
