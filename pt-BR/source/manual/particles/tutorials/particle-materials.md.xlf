<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/particles/tutorials/particle-materials.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Tutorial: Particle materials</source>
<target xml:lang="pt">Tutorial: Particle materials</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Programmer<x id="6"/></source>
<target xml:lang="pt"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Programmer<x id="6"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">This tutorial demonstrates how to create custom shaders and materials for a particle system, providing functionality not available in the core engine. It focuses on shaders and rendering. For simulation, see the <g id="1">custom particles tutorial</g>.</source>
<target xml:lang="pt">This tutorial demonstrates how to create custom shaders and materials for a particle system, providing functionality not available in the core engine. It focuses on shaders and rendering. For simulation, see the <g id="1">custom particles tutorial</g>.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">If you're not familiar with editing particles, see <g id="1">Create particles</g>.</source>
<target xml:lang="pt">If you're not familiar with editing particles, see <g id="1">Create particles</g>.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Start by creating a new <g id="1">Sample: Particles</g> project.</source>
<target xml:lang="pt">Start by creating a new <g id="1">Sample: Particles</g> project.</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Particles sample project<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Particles sample project<x id="2"/></target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">This project contains four scenes, each demonstrating a different way to use particles: <g id="1">AnimatedParticles</g>, <g id="2">ChildParticles</g>, <g id="3">CustomMaterials</g>, and <g id="4">CustomParticles</g>.</source>
<target xml:lang="pt">This project contains four scenes, each demonstrating a different way to use particles: <g id="1">AnimatedParticles</g>, <g id="2">ChildParticles</g>, <g id="3">CustomMaterials</g>, and <g id="4">CustomParticles</g>.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Open the <g id="1">CustomMaterials</g> scene.</source>
<target xml:lang="pt">Open the <g id="1">CustomMaterials</g> scene.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">There are three particle entities in the scene: <g id="1">Rad Particle System</g>, <g id="2">Radial Particle System</g>, and <g id="3">Two Textures Particle System</g>.</source>
<target xml:lang="pt">There are three particle entities in the scene: <g id="1">Rad Particle System</g>, <g id="2">Radial Particle System</g>, and <g id="3">Two Textures Particle System</g>.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-1.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-samples-material-1.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Select one of the particle entities and navigate to its source particle system, expanding the emitter in it and its material.</source>
<target xml:lang="pt">Select one of the particle entities and navigate to its source particle system, expanding the emitter in it and its material.</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Red particle system</source>
<target xml:lang="pt">Red particle system</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">The <g id="1">red particle system</g> has a very simple customization. Since the <g id="2">material maps</g> already provide an option to use shaders as a leaf node input, we can create a custom shader and assign it to that node.</source>
<target xml:lang="pt">The <g id="1">red particle system</g> has a very simple customization. Since the <g id="2">material maps</g> already provide an option to use shaders as a leaf node input, we can create a custom shader and assign it to that node.</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">First, create a shader (<g id="1">ComputeColorRed.sdsl</g>) with a derived class for <g id="2">ComputeColor</g>:</source>
<target xml:lang="pt">First, create a shader (<g id="1">ComputeColorRed.sdsl</g>) with a derived class for <g id="2">ComputeColor</g>:</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 0, 0, 1);
  }
};
</source>
<target xml:lang="pt">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 0, 0, 1);
  }
};
</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">The only thing this shader does is return the red color for pixel shading every time <g id="1">Compute</g> is called. We'll try something more difficult later, but for now let's keep it simple.</source>
<target xml:lang="pt">The only thing this shader does is return the red color for pixel shading every time <g id="1">Compute</g> is called. We'll try something more difficult later, but for now let's keep it simple.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Save the file and reload the scripts in Game Studio. You should see the new shader in <g id="1">Asset View</g>.</source>
<target xml:lang="pt">Save the file and reload the scripts in Game Studio. You should see the new shader in <g id="1">Asset View</g>.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-2.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-samples-material-2.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">If the shader isn't there, reload the project.</source>
<target xml:lang="pt">If the shader isn't there, reload the project.</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">Once the shader is loaded, you can access it in the <g id="1">Property Grid</g> under the <g id="2">dynamic emissive material</g> for the particles. Choose a type of shader and, from the drop-down menu, select the shader you just added to the scene.</source>
<target xml:lang="pt">Once the shader is loaded, you can access it in the <g id="1">Property Grid</g> under the <g id="2">dynamic emissive material</g> for the particles. Choose a type of shader and, from the drop-down menu, select the shader you just added to the scene.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-3.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-samples-material-3.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">The particles are red. With Game Studio running, edit and save <g id="1">ComputeColorRed.sdsl</g> to make them yellow.</source>
<target xml:lang="pt">The particles are red. With Game Studio running, edit and save <g id="1">ComputeColorRed.sdsl</g> to make them yellow.</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 1, 0, 1);
  }
};
</source>
<target xml:lang="pt">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 1, 0, 1);
  }
};
</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">Because Stride supports dynamic shader compilation, the particles immediately turn yellow.</source>
<target xml:lang="pt">Because Stride supports dynamic shader compilation, the particles immediately turn yellow.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Radial particle system</source>
<target xml:lang="pt">Radial particle system</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">For the next shader we'll use texture coordinates expose arbitrary values to the editor.</source>
<target xml:lang="pt">For the next shader we'll use texture coordinates expose arbitrary values to the editor.</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en">Check <g id="1">ComputeColorRadial.sdsl</g>.</source>
<target xml:lang="pt">Check <g id="1">ComputeColorRadial.sdsl</g>.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en">class ComputeColorRadial&lt;float4 ColorCenter, float4 ColorEdge> : ComputeColor, Texturing
{
  override float4 Compute()
  {
      float radialDistance = length(streams.TexCoord - float2(0.5, 0.5)) * 2;

      float4 unclamped = lerp(ColorCenter, ColorEdge, radialDistance);

      // We want to allow the intensity to grow a lot, but cap the alpha to 1
      float4 clamped = clamp(unclamped, float4(0, 0, 0, 0), float4(1000, 1000, 1000, 1));

      // Remember that we use a premultiplied alpha pipeline so all color values should be premultiplied
      clamped.rgb *= clamped.a;

      return clamped;
  }
};
</source>
<target xml:lang="pt">class ComputeColorRadial&lt;float4 ColorCenter, float4 ColorEdge> : ComputeColor, Texturing
{
  override float4 Compute()
  {
      float radialDistance = length(streams.TexCoord - float2(0.5, 0.5)) * 2;

      float4 unclamped = lerp(ColorCenter, ColorEdge, radialDistance);

      // We want to allow the intensity to grow a lot, but cap the alpha to 1
      float4 clamped = clamp(unclamped, float4(0, 0, 0, 0), float4(1000, 1000, 1000, 1));

      // Remember that we use a premultiplied alpha pipeline so all color values should be premultiplied
      clamped.rgb *= clamped.a;

      return clamped;
  }
};
</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">This is similar to <g id="1">ComputeColorRed</g> and can be compiled and loaded the same way.</source>
<target xml:lang="pt">This is similar to <g id="1">ComputeColorRed</g> and can be compiled and loaded the same way.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">There are several key differences. The shader now inherits from the <g id="1">Texturing</g> shader base class as well. This allows it to use texture coordinates in from the streams. On the material side in Game Studio, we can force the texture coordinates to be streamed in case we don't use texture animation.</source>
<target xml:lang="pt">There are several key differences. The shader now inherits from the <g id="1">Texturing</g> shader base class as well. This allows it to use texture coordinates in from the streams. On the material side in Game Studio, we can force the texture coordinates to be streamed in case we don't use texture animation.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en">The input values <g id="1">float4 ColorCenter</g> and <g id="2">float4 ColorEdge</g> in our shader are permutations. When we load the shader the Property Grid displays them under the <g id="3">Generics</g> dictionary.</source>
<target xml:lang="pt">The input values <g id="1">float4 ColorCenter</g> and <g id="2">float4 ColorEdge</g> in our shader are permutations. When we load the shader the Property Grid displays them under the <g id="3">Generics</g> dictionary.</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-4.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-samples-material-4.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">The values we set here will be used by the <g id="1">ComputeColorRadial</g> shader for the particles. The rest of the shader simply calculates a gradient color based on the distance of the shaded pixel from the center of the billboard.</source>
<target xml:lang="pt">The values we set here will be used by the <g id="1">ComputeColorRadial</g> shader for the particles. The rest of the shader simply calculates a gradient color based on the distance of the shaded pixel from the center of the billboard.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">Two-texture particle system</source>
<target xml:lang="pt">Two-texture particle system</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">This demonstrates how to create custom materials and effects for the particles. The <g id="1">DynamicColor</g> material supports one RGBA channel. For our sample, we'll separate the RGB and A channels, allowing them to use different texture coordinate animations and different textures and binary trees to compute the color.</source>
<target xml:lang="pt">This demonstrates how to create custom materials and effects for the particles. The <g id="1">DynamicColor</g> material supports one RGBA channel. For our sample, we'll separate the RGB and A channels, allowing them to use different texture coordinate animations and different textures and binary trees to compute the color.</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">Parameter keys</source>
<target xml:lang="pt">Parameter keys</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">Parameter keys are used to map data and pass it to the shader. Some of them are generated, and we can define our own too.</source>
<target xml:lang="pt">Parameter keys are used to map data and pass it to the shader. Some of them are generated, and we can define our own too.</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">If we define more streams in our shader (<g id="1">ParticleCustomShader</g>), they're exported to an automatically generated class. Try adding the following to <g id="2">ParticleCustomShader.sdsl</g>:</source>
<target xml:lang="pt">If we define more streams in our shader (<g id="1">ParticleCustomShader</g>), they're exported to an automatically generated class. Try adding the following to <g id="2">ParticleCustomShader.sdsl</g>:</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">  // -------------------------------------
  // streams
  // -------------------------------------
  stage float4 SomeRandomKey;
</source>
<target xml:lang="pt">  // -------------------------------------
  // streams
  // -------------------------------------
  stage float4 SomeRandomKey;
</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">The generated .cs file should now contain:</source>
<target xml:lang="pt">The generated .cs file should now contain:</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  public static partial class ParticleCustomShaderKeys
  {
      public static readonly ParameterKey&lt;Vector4> SomeRandomKey = ParameterKeys.New&lt;Vector4>();
  }
}
</source>
<target xml:lang="pt">namespace Stride.Rendering
{
  public static partial class ParticleCustomShaderKeys
  {
      public static readonly ParameterKey&lt;Vector4> SomeRandomKey = ParameterKeys.New&lt;Vector4>();
  }
}
</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">We don't need this stream for now, so we can delete it.</source>
<target xml:lang="pt">We don't need this stream for now, so we can delete it.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">We'll define some extra keys in <g id="1">ParticleCustomMaterialKeys.cs</g> to use in our material and effects.</source>
<target xml:lang="pt">We'll define some extra keys in <g id="1">ParticleCustomMaterialKeys.cs</g> to use in our material and effects.</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  public partial class ParticleCustomShaderKeys
  {
      static ParticleCustomShaderKeys()
      {

      }

      public static readonly ParameterKey&lt;ShaderSource> BaseColor     = ParameterKeys.New&lt;ShaderSource>();

      public static readonly ParameterKey&lt;Texture> EmissiveMap = ParameterKeys.New&lt;Texture>();
      public static readonly ParameterKey&lt;Color4> EmissiveValue = ParameterKeys.New&lt;Color4>();



      public static readonly ParameterKey&lt;ShaderSource> BaseIntensity = ParameterKeys.New&lt;ShaderSource>();

      public static readonly ParameterKey&lt;Texture> IntensityMap = ParameterKeys.New&lt;Texture>();
      public static readonly ParameterKey&lt;float> IntensityValue = ParameterKeys.New&lt;float>();
  }
}
</source>
<target xml:lang="pt">namespace Stride.Rendering
{
  public partial class ParticleCustomShaderKeys
  {
      static ParticleCustomShaderKeys()
      {

      }

      public static readonly ParameterKey&lt;ShaderSource> BaseColor     = ParameterKeys.New&lt;ShaderSource>();

      public static readonly ParameterKey&lt;Texture> EmissiveMap = ParameterKeys.New&lt;Texture>();
      public static readonly ParameterKey&lt;Color4> EmissiveValue = ParameterKeys.New&lt;Color4>();



      public static readonly ParameterKey&lt;ShaderSource> BaseIntensity = ParameterKeys.New&lt;ShaderSource>();

      public static readonly ParameterKey&lt;Texture> IntensityMap = ParameterKeys.New&lt;Texture>();
      public static readonly ParameterKey&lt;float> IntensityValue = ParameterKeys.New&lt;float>();
  }
}
</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en">As we saw above, the generated class has the same name and the namespace is <g id="1">Stride.Rendering</g>, so we have to make our class partial and match the namespace. This has no effect on this specific sample, but will result in compilation error if your shader code auto-generates some keys.</source>
<target xml:lang="pt">As we saw above, the generated class has the same name and the namespace is <g id="1">Stride.Rendering</g>, so we have to make our class partial and match the namespace. This has no effect on this specific sample, but will result in compilation error if your shader code auto-generates some keys.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">The rest of the code is self-explanatory. We'll need the map and value keys for shader generation later, and we'll set our generated code to the <g id="1">BaseColor</g> and <g id="2">BaseIntensity</g> keys respectively so the shader can use it.</source>
<target xml:lang="pt">The rest of the code is self-explanatory. We'll need the map and value keys for shader generation later, and we'll set our generated code to the <g id="1">BaseColor</g> and <g id="2">BaseIntensity</g> keys respectively so the shader can use it.</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">Custom Shader</source>
<target xml:lang="pt">Custom Shader</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en">Let's look at <g id="1">ParticleCustomShader.sdsl</g>:</source>
<target xml:lang="pt">Let's look at <g id="1">ParticleCustomShader.sdsl</g>:</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">
class ParticleCustomShader : ParticleBase
{
  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseColor;

  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseIntensity;

  // Shading of the sprite — we override the base class's Shading(), which only returns ColorScale
  stage override float4 Shading()
  {
      // -----------------------------------------------
      // Base particle color RGB
      // -----------------------------------------------
      float4 finalColor = base.Shading() * baseColor.Compute();

      // -----------------------------------------------
      // Base particle alpha
      // -----------------------------------------------
      finalColor.a    = baseIntensity.Compute();

      //  Don't forget to premultiply the alpha
      finalColor.rgb *= finalColor.aaa;

      return finalColor;
  }
};
</source>
<target xml:lang="pt">
class ParticleCustomShader : ParticleBase
{
  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseColor;

  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseIntensity;

  // Shading of the sprite — we override the base class's Shading(), which only returns ColorScale
  stage override float4 Shading()
  {
      // -----------------------------------------------
      // Base particle color RGB
      // -----------------------------------------------
      float4 finalColor = base.Shading() * baseColor.Compute();

      // -----------------------------------------------
      // Base particle alpha
      // -----------------------------------------------
      finalColor.a    = baseIntensity.Compute();

      //  Don't forget to premultiply the alpha
      finalColor.rgb *= finalColor.aaa;

      return finalColor;
  }
};
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">It defines two composed shaders, <g id="1">baseColor</g> and <g id="2">abseIntensity</g>, where we'll plug our generated shaders for RGB and A respectively. It inherits <g id="3">ParticleBase</g> which already defines <g id="4">VSMain</g>, <g id="5">PSMain</g> and texturing, and uses very simple <g id="6">Shading()</g> method.</source>
<target xml:lang="pt">It defines two composed shaders, <g id="1">baseColor</g> and <g id="2">abseIntensity</g>, where we'll plug our generated shaders for RGB and A respectively. It inherits <g id="3">ParticleBase</g> which already defines <g id="4">VSMain</g>, <g id="5">PSMain</g> and texturing, and uses very simple <g id="6">Shading()</g> method.</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en">By overriding the <g id="1">Shading()</g> method we can define our custom behavior. Because the composed shaders we use are derived from <g id="2">ComputeColor</g>, we can easily evaluate them using <g id="3">Compute()</g>, which gives us the root of the compute tree for color and intensity.</source>
<target xml:lang="pt">By overriding the <g id="1">Shading()</g> method we can define our custom behavior. Because the composed shaders we use are derived from <g id="2">ComputeColor</g>, we can easily evaluate them using <g id="3">Compute()</g>, which gives us the root of the compute tree for color and intensity.</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">Custom effect</source>
<target xml:lang="pt">Custom effect</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">Our effect describes how to mix and compose the shaders. It's in <g id="1">ParticleCustomEffect.sdfx</g>:</source>
<target xml:lang="pt">Our effect describes how to mix and compose the shaders. It's in <g id="1">ParticleCustomEffect.sdfx</g>:</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  partial shader ParticleCustomEffect
  {
      // Use the ParticleBaseKeys for constant attributes, defined in the game engine
      using params ParticleBaseKeys;

      // Use the ParticleCustomShaderKeys for constant attributes, defined in this project
      using params ParticleCustomShaderKeys;

      // Inherit from the ParticleBaseEffect.sdfx, defined in the game engine
      mixin ParticleBaseEffect;

      // Use the ParticleCustomShader.sdsl, defined in this project
      mixin ParticleCustomShader;

      // If the user-defined shader for the baseColor is not null use it
      if (ParticleCustomShaderKeys.BaseColor != null)
      {
          mixin compose baseColor = ParticleCustomShaderKeys.BaseColor;
      }

      // If the user-defined shader for the baseIntensity (alpha) is not null use it
      if (ParticleCustomShaderKeys.BaseIntensity != null)
      {
          mixin compose baseIntensity = ParticleCustomShaderKeys.BaseIntensity;
      }

 };

}
</source>
<target xml:lang="pt">namespace Stride.Rendering
{
  partial shader ParticleCustomEffect
  {
      // Use the ParticleBaseKeys for constant attributes, defined in the game engine
      using params ParticleBaseKeys;

      // Use the ParticleCustomShaderKeys for constant attributes, defined in this project
      using params ParticleCustomShaderKeys;

      // Inherit from the ParticleBaseEffect.sdfx, defined in the game engine
      mixin ParticleBaseEffect;

      // Use the ParticleCustomShader.sdsl, defined in this project
      mixin ParticleCustomShader;

      // If the user-defined shader for the baseColor is not null use it
      if (ParticleCustomShaderKeys.BaseColor != null)
      {
          mixin compose baseColor = ParticleCustomShaderKeys.BaseColor;
      }

      // If the user-defined shader for the baseIntensity (alpha) is not null use it
      if (ParticleCustomShaderKeys.BaseIntensity != null)
      {
          mixin compose baseIntensity = ParticleCustomShaderKeys.BaseIntensity;
      }

 };

}
</target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en"><g id="1">ParticleBaseKeys</g> and <g id="2">ParticleBaseEffect</g> are required by the base shader which we inherit.</source>
<target xml:lang="pt"><g id="1">ParticleBaseKeys</g> and <g id="2">ParticleBaseEffect</g> are required by the base shader which we inherit.</target>
</trans-unit>
<trans-unit id="tu56" xml:space="preserve">
<source xml:lang="en"><g id="1">ParticleCustomShaderKeys</g> provides the keys we defined earlier, where we'll plug our shaders.</source>
<target xml:lang="pt"><g id="1">ParticleCustomShaderKeys</g> provides the keys we defined earlier, where we'll plug our shaders.</target>
</trans-unit>
<trans-unit id="tu57" xml:space="preserve">
<source xml:lang="en">Finally, for both shaders we only need to check if there is user-defined code for it and plug it. The <g id="1">baseColor</g> and <g id="2">baseIntensity</g> parameters are from the shader we created earlier.</source>
<target xml:lang="pt">Finally, for both shaders we only need to check if there is user-defined code for it and plug it. The <g id="1">baseColor</g> and <g id="2">baseIntensity</g> parameters are from the shader we created earlier.</target>
</trans-unit>
<trans-unit id="tu58" xml:space="preserve">
<source xml:lang="en">Last, we need a material which sets all the keys and uses the newly created effect.</source>
<target xml:lang="pt">Last, we need a material which sets all the keys and uses the newly created effect.</target>
</trans-unit>
<trans-unit id="tu59" xml:space="preserve">
<source xml:lang="en">Custom particle material</source>
<target xml:lang="pt">Custom particle material</target>
</trans-unit>
<trans-unit id="tu60" xml:space="preserve">
<source xml:lang="en">We'll copy @'Stride.Particles.Materials.ParticleMaterialComputeColor' into <g id="1">ParticleCustomMaterial.cs</g> in our project and customize it to use two shaders for color binary trees.</source>
<target xml:lang="pt">We'll copy @'Stride.Particles.Materials.ParticleMaterialComputeColor' into <g id="1">ParticleCustomMaterial.cs</g> in our project and customize it to use two shaders for color binary trees.</target>
</trans-unit>
<trans-unit id="tu61" xml:space="preserve">
<source xml:lang="en">      [DataMemberIgnore]
      protected override string EffectName { get; set; } = "ParticleCustomEffect";
</source>
<target xml:lang="pt">      [DataMemberIgnore]
      protected override string EffectName { get; set; } = "ParticleCustomEffect";
</target>
</trans-unit>
<trans-unit id="tu62" xml:space="preserve">
<source xml:lang="en">The base class automatically tries to load the effect specified with <g id="1">EffectName</g>. We give it the name of the effect we crated earlier.</source>
<target xml:lang="pt">The base class automatically tries to load the effect specified with <g id="1">EffectName</g>. We give it the name of the effect we crated earlier.</target>
</trans-unit>
<trans-unit id="tu63" xml:space="preserve">
<source xml:lang="en">      [DataMember(300)]
      [Display("Alpha")]
      public IComputeScalar ComputeScalar { get; set; } = new ComputeTextureScalar();

      [DataMember(400)]
      [Display("TexCoord1")]
      public UVBuilder UVBuilder1;
      private AttributeDescription texCoord1 = new AttributeDescription("TEXCOORD1");
</source>
<target xml:lang="pt">      [DataMember(300)]
      [Display("Alpha")]
      public IComputeScalar ComputeScalar { get; set; } = new ComputeTextureScalar();

      [DataMember(400)]
      [Display("TexCoord1")]
      public UVBuilder UVBuilder1;
      private AttributeDescription texCoord1 = new AttributeDescription("TEXCOORD1");
</target>
</trans-unit>
<trans-unit id="tu64" xml:space="preserve">
<source xml:lang="en">In addition to the already existing @'Stride.Rendering.Materials.IComputeColor', we'll use @'Stride.Rendering.Materials.IComputeScalar' for intensity, which returns a float, rather than a float4. We will also add another  @'Stride.Particles.Materials.UVBuilder' for a second texture coordinates animation.</source>
<target xml:lang="pt">In addition to the already existing @'Stride.Rendering.Materials.IComputeColor', we'll use @'Stride.Rendering.Materials.IComputeScalar' for intensity, which returns a float, rather than a float4. We will also add another  @'Stride.Particles.Materials.UVBuilder' for a second texture coordinates animation.</target>
</trans-unit>
<trans-unit id="tu65" xml:space="preserve">
<source xml:lang="en">  var shaderBaseColor = ComputeColor.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.EmissiveMap, ParticleCustomShaderKeys.EmissiveValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseColor, shaderBaseColor);

  var shaderBaseScalar = ComputeScalar.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.IntensityMap, ParticleCustomShaderKeys.IntensityValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseIntensity, shaderBaseScalar);
</source>
<target xml:lang="pt">  var shaderBaseColor = ComputeColor.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.EmissiveMap, ParticleCustomShaderKeys.EmissiveValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseColor, shaderBaseColor);

  var shaderBaseScalar = ComputeScalar.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.IntensityMap, ParticleCustomShaderKeys.IntensityValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseIntensity, shaderBaseScalar);
</target>
</trans-unit>
<trans-unit id="tu66" xml:space="preserve">
<source xml:lang="en">We load the two shaders: one for the main color and one for the intensity. These are similar to the shaders we wrote manually in the last two examples, except we generate them on the fly directly from the <g id="1">ComputeColor</g> and <g id="2">ComputeScalar</g> properties, which you can edit in the Property Grid. The generated code is similar to the shader code we wrote in the way that it calls <g id="3">Compute()</g> and it returns the final result of our color or scalar compute tree.</source>
<target xml:lang="pt">We load the two shaders: one for the main color and one for the intensity. These are similar to the shaders we wrote manually in the last two examples, except we generate them on the fly directly from the <g id="1">ComputeColor</g> and <g id="2">ComputeScalar</g> properties, which you can edit in the Property Grid. The generated code is similar to the shader code we wrote in the way that it calls <g id="3">Compute()</g> and it returns the final result of our color or scalar compute tree.</target>
</trans-unit>
<trans-unit id="tu67" xml:space="preserve">
<source xml:lang="en">After we generate the shader code, we set it to the respective key we need. Check how <g id="1">ParticleCustomShaderKeys.BaseColor</g> is defined in <g id="2">ParticleCustomShaderKeys.cs</g>. In the effect file we check if this key is set, and if yes, we pass it to the stream defined in our shader code.</source>
<target xml:lang="pt">After we generate the shader code, we set it to the respective key we need. Check how <g id="1">ParticleCustomShaderKeys.BaseColor</g> is defined in <g id="2">ParticleCustomShaderKeys.cs</g>. In the effect file we check if this key is set, and if yes, we pass it to the stream defined in our shader code.</target>
</trans-unit>
<trans-unit id="tu68" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu69" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Create a trail</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Create a trail</g></target>
</trans-unit>
<trans-unit id="tu70" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Custom particles</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Custom particles</g></target>
</trans-unit>
<trans-unit id="tu71" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Inheritance</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Inheritance</g></target>
</trans-unit>
<trans-unit id="tu72" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Lasers and lightning</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Lasers and lightning</g></target>
</trans-unit>
<trans-unit id="tu73" xml:space="preserve">
<source xml:lang="en"><g id="1">Particles</g></source>
<target xml:lang="pt"><g id="1">Particles</g></target>
</trans-unit>
<trans-unit id="tu74" xml:space="preserve">
<source xml:lang="en"><g id="1">Create particles</g></source>
<target xml:lang="pt"><g id="1">Create particles</g></target>
</trans-unit>
</body>
</file>
</xliff>
