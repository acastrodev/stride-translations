<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/game-studio/use-assets.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Use assets</source>
<target xml:lang="pt">Use assets</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Beginner<x id="2"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">There are four ways to use assets:</source>
<target xml:lang="pt">There are four ways to use assets:</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">reference them in entity components</source>
<target xml:lang="pt">reference them in entity components</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">reference them in other assets</source>
<target xml:lang="pt">reference them in other assets</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">load them from code as content</source>
<target xml:lang="pt">load them from code as content</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">load them from code as content using <g id="1">UrlReference</g></source>
<target xml:lang="pt">load them from code as content using <g id="1">UrlReference</g></target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Reference assets in components</source>
<target xml:lang="pt">Reference assets in components</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Many kinds of component use assets. For example, model components use model assets.</source>
<target xml:lang="pt">Many kinds of component use assets. For example, model components use model assets.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Components that use assets have <g id="1">asset docks</g> in the <g id="2">property grid</g>.</source>
<target xml:lang="pt">Components that use assets have <g id="1">asset docks</g> in the <g id="2">property grid</g>.</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Select an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Select an asset<x id="2"/></target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">To add an asset to an entity component, drag the asset to the asset dock in the component properties (in the <g id="1">property grid</g>). You can drop assets in the text field or the empty thumbnail.</source>
<target xml:lang="pt">To add an asset to an entity component, drag the asset to the asset dock in the component properties (in the <g id="1">property grid</g>). You can drop assets in the text field or the empty thumbnail.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Drag and drop an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Drag and drop an asset<x id="2"/></target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">Alternatively, click <x id="1"/>Hand icon<x id="2"/> (<g id="3">Select an asset</g>).</source>
<target xml:lang="pt">Alternatively, click <x id="1"/>Hand icon<x id="2"/> (<g id="3">Select an asset</g>).</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Select an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Select an asset<x id="2"/></target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">The <g id="1">Select an asset</g> window opens.</source>
<target xml:lang="pt">The <g id="1">Select an asset</g> window opens.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!NOTE<x id="2"/>
The <g id="3">Select an asset</g> window only displays assets of types expected by the component. For example, if the component is an audio listener, the window only displays audio assets.</source>
<target xml:lang="pt"><x id="1"/>!NOTE<x id="2"/>
The <g id="3">Select an asset</g> window only displays assets of types expected by the component. For example, if the component is an audio listener, the window only displays audio assets.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">After you add an asset to a component, the asset dock displays its name and a thumbnail image.</source>
<target xml:lang="pt">After you add an asset to a component, the asset dock displays its name and a thumbnail image.</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Asset displayed<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Asset displayed<x id="2"/></target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">Reference assets in other assets</source>
<target xml:lang="pt">Reference assets in other assets</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">Assets can reference other assets. For example, a model asset might use material assets.</source>
<target xml:lang="pt">Assets can reference other assets. For example, a model asset might use material assets.</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">You can add asset references to assets the same way you add them to entity components (see above).</source>
<target xml:lang="pt">You can add asset references to assets the same way you add them to entity components (see above).</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">Clear a reference</source>
<target xml:lang="pt">Clear a reference</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">To clear a reference to an asset, in the <g id="1">asset dock</g>, click <x id="2"/>eraser<x id="3"/> (<g id="4">Clear reference</g>).</source>
<target xml:lang="pt">To clear a reference to an asset, in the <g id="1">asset dock</g>, click <x id="2"/>eraser<x id="3"/> (<g id="4">Clear reference</g>).</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Use eraser<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Use eraser<x id="2"/></target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">Examine references</source>
<target xml:lang="pt">Examine references</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en">You can see the references in a selected asset in the <g id="1">References</g> tab. By default, this is in the bottom right of Game Studio.</source>
<target xml:lang="pt">You can see the references in a selected asset in the <g id="1">References</g> tab. By default, this is in the bottom right of Game Studio.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en"><x id="1"/>References tab<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>References tab<x id="2"/></target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">The <g id="1">References</g> tab displays the assets referenced by the selected asset.</source>
<target xml:lang="pt">The <g id="1">References</g> tab displays the assets referenced by the selected asset.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">The <g id="1">Referenced by</g> tab displays the assets that reference the selected asset.</source>
<target xml:lang="pt">The <g id="1">Referenced by</g> tab displays the assets that reference the selected asset.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Tip<x id="2"/>
If you can't see the References tab, make sure it's displayed under <g id="3">View > References</g>.</source>
<target xml:lang="pt"><x id="1"/>!Tip<x id="2"/>
If you can't see the References tab, make sure it's displayed under <g id="3">View > References</g>.</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en">Load assets from code</source>
<target xml:lang="pt">Load assets from code</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">When loading in assets at runtime we speak of "Content" rather than assets. The loaded content refers to the asset and can then be used in your script.</source>
<target xml:lang="pt">When loading in assets at runtime we speak of "Content" rather than assets. The loaded content refers to the asset and can then be used in your script.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">// Load a model (replace URL with valid URL)
var model = Content.Load&lt;Model>("AssetFolder/MyModel");

// Create a new entity to add to the scene
Entity entity = new Entity(position, "Entity Added by Script") { new ModelComponent { Model = model } };

// Add a new entity to the scene
SceneSystem.SceneInstance.RootScene.Entities.Add(entity);
</source>
<target xml:lang="pt">// Load a model (replace URL with valid URL)
var model = Content.Load&lt;Model>("AssetFolder/MyModel");

// Create a new entity to add to the scene
Entity entity = new Entity(position, "Entity Added by Script") { new ModelComponent { Model = model } };

// Add a new entity to the scene
SceneSystem.SceneInstance.RootScene.Entities.Add(entity);
</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!TIP<x id="2"/>
To find the asset URL, in Game Studio, move the mouse over the asset. Game Studio displays the asset URL in a tooltip.  URLs typically have the format <g id="3">AssetFolder/AssetName</g>.
<x id="4"/>!WARNING<x id="5"/>
When loading assets from scripts, make sure you:</source>
<target xml:lang="pt"><x id="1"/>!TIP<x id="2"/>
To find the asset URL, in Game Studio, move the mouse over the asset. Game Studio displays the asset URL in a tooltip.  URLs typically have the format <g id="3">AssetFolder/AssetName</g>.
<x id="4"/>!WARNING<x id="5"/>
When loading assets from scripts, make sure you:</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">include the asset in the build as described in <g id="1">Manage assets</g></source>
<target xml:lang="pt">include the asset in the build as described in <g id="1">Manage assets</g></target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">make sure you add the script as a component to an entity in the scene</source>
<target xml:lang="pt">make sure you add the script as a component to an entity in the scene</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">Unload unneeded assets</source>
<target xml:lang="pt">Unload unneeded assets</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">When loading content from code, you should unload content when you don't need them any more. If you don't, content stays in memory, wasting GPU.</source>
<target xml:lang="pt">When loading content from code, you should unload content when you don't need them any more. If you don't, content stays in memory, wasting GPU.</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">To do unload an asset, use <g id="1">Content.Unload(myAsset)</g>.</source>
<target xml:lang="pt">To do unload an asset, use <g id="1">Content.Unload(myAsset)</g>.</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">Load assets from code using UrlReference</source>
<target xml:lang="pt">Load assets from code using UrlReference</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference</g> allows you to reference assets in your scripts the same way you would with normal assets but they are loaded dynamically in code. Referencing an asset with a <g id="2">UrlReference</g> causes the asset to be included in the build.</source>
<target xml:lang="pt"><g id="1">UrlReference</g> allows you to reference assets in your scripts the same way you would with normal assets but they are loaded dynamically in code. Referencing an asset with a <g id="2">UrlReference</g> causes the asset to be included in the build.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">You can reference assets in your scripts using properties/fields of type <g id="1">UrlReference</g> or <g id="2">UrlReference&lt;T></g>:</source>
<target xml:lang="pt">You can reference assets in your scripts using properties/fields of type <g id="1">UrlReference</g> or <g id="2">UrlReference&lt;T></g>:</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference</g> can be used to reference any asset. This is most useful for the "Raw asset".</source>
<target xml:lang="pt"><g id="1">UrlReference</g> can be used to reference any asset. This is most useful for the "Raw asset".</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference&lt;T></g> can be used to specify the desired type. i.e. <g id="2">UrlReference&lt;Scene></g>. This gives Game Studio a hint about what type of asset this <g id="3">UrlReference</g> can be used for.</source>
<target xml:lang="pt"><g id="1">UrlReference&lt;T></g> can be used to specify the desired type. i.e. <g id="2">UrlReference&lt;Scene></g>. This gives Game Studio a hint about what type of asset this <g id="3">UrlReference</g> can be used for.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">Examples</source>
<target xml:lang="pt">Examples</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">Loading a Scene</source>
<target xml:lang="pt">Loading a Scene</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en">Using <g id="1">UrlReference&lt;Scene></g> to load the next scene.</source>
<target xml:lang="pt">Using <g id="1">UrlReference&lt;Scene></g> to load the next scene.</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference&lt;Scene> NextSceneUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task LoadNextScene()
        {
            //Dynamically load next scene asynchronously
            var nextScene = await Content.LoadAsync(NextSceneUrl);
            SceneSystem.SceneInstance.RootScene = nextScene;
        }
    }
}
</source>
<target xml:lang="pt">using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference&lt;Scene> NextSceneUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task LoadNextScene()
        {
            //Dynamically load next scene asynchronously
            var nextScene = await Content.LoadAsync(NextSceneUrl);
            SceneSystem.SceneInstance.RootScene = nextScene;
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">Load data from a Raw asset JSON file</source>
<target xml:lang="pt">Load data from a Raw asset JSON file</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en">Use a Raw asset to store data in a JSON file and load using <g id="1">Newtonsoft.Json</g>. To use <g id="2">Newtonsoft.Json</g> you also need to add the <g id="3">Newtonsoft.Json</g> NuGet package to the project.</source>
<target xml:lang="pt">Use a Raw asset to store data in a JSON file and load using <g id="1">Newtonsoft.Json</g>. To use <g id="2">Newtonsoft.Json</g> you also need to add the <g id="3">Newtonsoft.Json</g> NuGet package to the project.</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">//Include the Newtonsoft.Json namespace.
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference RawAssetUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task&lt;MyDataClass> LoadMyData()
        {
            //Open a StreamReader to read the content
            using (var stream = Content.OpenAsStream(RawAssetUrl))
            using (var streamReader = new StreamReader(stream))
            {
                //read the raw asset content
                string json = await streamReader.ReadToEndAsync();
                //Deserialize the JSON to your custom MyDataClass Type.
                return JsonConvert.DeserializeObject&lt;MyDataClass>(json);
            }
        }
    }
}
</source>
<target xml:lang="pt">//Include the Newtonsoft.Json namespace.
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference RawAssetUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task&lt;MyDataClass> LoadMyData()
        {
            //Open a StreamReader to read the content
            using (var stream = Content.OpenAsStream(RawAssetUrl))
            using (var streamReader = new StreamReader(stream))
            {
                //read the raw asset content
                string json = await streamReader.ReadToEndAsync();
                //Deserialize the JSON to your custom MyDataClass Type.
                return JsonConvert.DeserializeObject&lt;MyDataClass>(json);
            }
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en"><g id="1">Create assets</g></source>
<target xml:lang="pt"><g id="1">Create assets</g></target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en"><g id="1">Manage assets</g></source>
<target xml:lang="pt"><g id="1">Manage assets</g></target>
</trans-unit>
</body>
</file>
</xliff>
