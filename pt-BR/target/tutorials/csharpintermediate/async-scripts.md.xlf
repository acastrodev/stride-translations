<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/tutorials/csharpintermediate/async-scripts.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Async scripts</source>
<target xml:lang="pt">Async scripts</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">This C# Intermediate tutorial covers the usage of asynchronous scripts or <g id="1">async</g> scripts.</source>
<target xml:lang="pt">Este tutorial intermediário C# cobre o uso de scripts assíncronos ou scripts <g id="1">async</g>.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Explanation</source>
<target xml:lang="pt">Explicação</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Up until this point every tutorial has been using <g id="1">sync</g> scripts. That means that those scripts are executed right after each other. If one particular sync script would take 1 second to complete, our game would freeze that 1 second, until the update loop is complete. All of the previously made Sync scripts can be made into an Async script.</source>
<target xml:lang="pt">Até este ponto, cada tutorial tem usado scripts <g id="1">sync</g>. Isso significa que esses scripts são executados logo após o outro. Se um script de sincronização em particular levaria 1 segundo para completar, nosso jogo congelaria esse 1 segundo, até que o loop de atualização esteja completo. Todos os scripts de Sincronização anteriores podem ser feitos em um script Async.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">With Async scripts we can perform heavy duty operations or reach out to an api without it freezing our application. A game can be made entirely with either Sync or Async scripts, or a combination of them both.</source>
<target xml:lang="pt">Com scripts Async podemos executar operações de serviço pesado ou chegar a um api sem ele congelar nossa aplicação. Um jogo pode ser feito inteiramente com scripts Sync ou Async, ou uma combinação deles ambos.</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Video https://www.youtube.com/embed/xWozou1AJGM<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>!Vídeo https://www.youtube.com/embed/xWozou1AJGM<x id="2"/></target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">Retrieving data from a web api</source>
<target xml:lang="pt">Recuperar dados de um web api</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">A common use case for async scripts is retrieving data from a web API. Depending on the speed of the API and the amount of data to be retrieved, this can take up to somewhere between 20 milliseconds and 2 seconds.
[!code-csharp<g id="1">AsyncWebApi</g>]</source>
<target xml:lang="pt">Um caso de uso comum para scripts async está recuperando dados de uma API web. Dependendo da velocidade da API e da quantidade de dados a serem recuperados, isso pode levar até algum lugar entre 20 milissegundos e 2 segundos.
[!code-csharp<g id="1">AsyncWebApi</g>]</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Async Collision trigger</source>
<target xml:lang="pt">Async Collision gatilho</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">In a previous tutorial we made a collision trigger script that would notify the user once an object is passing through it. We can make a similar script using Async script.
[!code-csharp<g id="1">AsyncCollisionTrigger</g>]</source>
<target xml:lang="pt">Em um tutorial anterior fizemos um script de gatilho de colisão que notificaria o usuário uma vez que um objeto está passando por ele. Podemos fazer um script semelhante usando o script Async.
[!code-csharp<g id="1">AsyncCollisionTrigger</g>]</target>
</trans-unit>
</body>
</file>
</xliff>