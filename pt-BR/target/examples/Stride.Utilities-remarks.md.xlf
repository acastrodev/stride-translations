<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/examples/Stride.Utilities-remarks.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Use the FileStream class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the Read, Write, CopyTo, and Flush methods to perform synchronous operations, or the ReadAsync, WriteAsync, CopyToAsync, and FlushAsync methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a Windows 8.x Store app or desktop app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. FileStream buffers input and output for better performance.</source>
<target xml:lang="pt">Utilize a classe FileStream para ler, escrever, abrir e fechar arquivos em um sistema de arquivos, bem como para manipular outros identificadores relacionados a arquivos do sistema operacional, como pipes, entrada padrão e saída padrão. Você pode empregar os métodos Read, Write, CopyTo e Flush para realizar operações síncronas ou os métodos ReadAsync, WriteAsync, CopyToAsync e FlushAsync para executar operações assíncronas. Prefira os métodos assíncronos para operações intensivas em recursos de arquivo, evitando o bloqueio da thread principal. Esta consideração de desempenho é particularmente crucial em aplicativos Windows 8.x Store ou aplicativos desktop, onde uma operação de fluxo demorada pode bloquear a thread de interface do usuário, fazendo com que o aplicativo pareça não estar respondendo. O FileStream realiza buffering de entrada e saída para aprimorar o desempenho.</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!NOTE<x id="2"/>
This type implements the IDisposable interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its Dispose method in a <g id="3">try/catch block</g>. To dispose of it indirectly, use a language construct such as <g id="4">using</g> (in C#) or Using (in Visual Basic). For more information, see the "Using an Object that Implements IDisposable" section in the IDisposable interface topic.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Este tipo implementa a interface IDisposable. Quando você terminar de usar o tipo, é necessário liberar seus recursos, seja diretamente ou indiretamente. Para liberá-lo diretamente, execute o método Dispose dele dentro de um bloco <g id="3">try/catch</g>. Para liberá-lo indiretamente, utilize uma construção de linguagem como o uso do bloco <g id="4">using</g> (em C#) ou Using (em Visual Basic). Para obter mais informações, consulte a seção "Utilizando um Objeto que Implementa IDisposable" no tópico da interface IDisposable.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">The IsAsync property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the FileStream class using a constructor that has an isAsync, useAsync, or options parameter. When the property is true, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the IsAsync property does not have to be true to call the ReadAsync, WriteAsync, or CopyToAsync method. When the IsAsync property is false and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.</source>
<target xml:lang="pt">A propriedade IsAsync indica se o identificador de arquivo foi aberto de forma assíncrona. Você deve especificar esse valor ao criar uma instância da classe FileStream usando um construtor que aceita o parâmetro isAsync, useAsync ou options. Quando essa propriedade é definida como verdadeira, o fluxo usa E/S sobreposta para executar operações de arquivo de forma assíncrona. No entanto, a propriedade IsAsync não precisa estar definida como verdadeira para utilizar os métodos ReadAsync, WriteAsync ou CopyToAsync. Quando a propriedade IsAsync está definida como falsa e você realiza operações de leitura e escrita de forma assíncrona, a thread de interface do usuário não é bloqueada, mas a operação de E/S é executada de forma síncrona.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">The Seek method supports random access to files. Seek allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the SeekOrigin enumeration.</source>
<target xml:lang="pt">O método Seek oferece suporte ao acesso aleatório a arquivos,  permitindo que a posição de leitura/escrita seja movida para qualquer ponto dentro do arquivo. Isso é feito por meio de parâmetros que indicam o deslocamento em bytes em relação a um ponto de referência de busca. O ponto de referência pode ser o início, a posição atual ou o final do arquivo subjacente, conforme representado pelos três membros da enumeração SeekOrigin.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!CAUTION<x id="2"/>
Disk files always support random access. At the time of construction, the CanSeek property value is set to true or false depending on the underlying file type. If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the CanSeek property value is true. Otherwise, the CanSeek property value is false.</source>
<target xml:lang="pt"><x id="1"/>!CAUTION<x id="2"/>
Arquivos em disco suportam acesso aleatório. Durante a criação, o valor da propriedade CanSeek é definido como verdadeiro ou falso, dependendo do tipo de arquivo subjacente. Se o tipo de arquivo subjacente for FILE_TYPE_DISK, conforme definido em winbase.h, a propriedade CanSeek será definida como verdadeira. Caso contrário, a propriedade CanSeek será definida como falsa.</target>
</trans-unit>
</body>
</file>
</xliff>