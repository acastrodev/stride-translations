<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/engine/assets/asset-control.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Asset control</source>
<target xml:lang="pt">Asset control</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Warning<x id="2"/>
This section is out of date. For now, you should only use it for reference.</source>
<target xml:lang="pt"><x id="1"/>!Warning<x id="2"/>
This section is out of date. For now, you should only use it for reference.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Until now, all assets of a game package, and its dependencies, were compiled as part of your game.</source>
<target xml:lang="pt">Until now, all assets of a game package, and its dependencies, were compiled as part of your game.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Starting with 1.3, we compile only the assets required by your game.</source>
<target xml:lang="pt">Starting with 1.3, we compile only the assets required by your game.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Don’t worry, most of it is done automatically for you! We do that by starting to collect dependencies from the new Game Setting asset: it references the Default Scene, and we can easily detect all the required asset references (Models, Materials, Asset referenced by your scripts and so on).</source>
<target xml:lang="pt">Don’t worry, most of it is done automatically for you! We do that by starting to collect dependencies from the new Game Setting asset: it references the Default Scene, and we can easily detect all the required asset references (Models, Materials, Asset referenced by your scripts and so on).</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">In case you were loading anything in your script using Content.Load, you can still tag those assets specifically with “Mark as Root” in the editor.</source>
<target xml:lang="pt">In case you were loading anything in your script using Content.Load, you can still tag those assets specifically with “Mark as Root” in the editor.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">However, we now recommend to instead create a field in your script and fill it directly in the editor. All the samples have been updated to this new practice, so please check them out.</source>
<target xml:lang="pt">However, we now recommend to instead create a field in your script and fill it directly in the editor. All the samples have been updated to this new practice, so please check them out.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Which assets are compiled?</source>
<target xml:lang="pt">Which assets are compiled?</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Assets that will be compiled and packaged in your project are:</source>
<target xml:lang="pt">Assets that will be compiled and packaged in your project are:</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><g id="1">Root assets (blue)</g></source>
<target xml:lang="pt"><g id="1">Root assets (blue)</g></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en"><g id="1">Automatic</g> for a few asset types (i.e. Game Settings, Shaders)</source>
<target xml:lang="pt"><g id="1">Automatic</g> for a few asset types (i.e. Game Settings, Shaders)</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Explicit (using "<g id="1">Mark as Root</g>" on the asset)</source>
<target xml:lang="pt">Explicit (using "<g id="1">Mark as Root</g>" on the asset)</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><g id="1">Dependencies of root assets (green)</g></source>
<target xml:lang="pt"><g id="1">Dependencies of root assets (green)</g></target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">Since Game Settings is collected, that means that Default Scene and all its dependencies will be compiled as well (includes Model, Script field members pointing to other assets, etc...)</source>
<target xml:lang="pt">Since Game Settings is collected, that means that Default Scene and all its dependencies will be compiled as well (includes Model, Script field members pointing to other assets, etc...)</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">Also, we encourage our users to switch your script from Content.Load (which require "Mark as Root") to a field member that you can set within the editor using drag and drop. That will create an implicit dependency that will force that asset to be compiled as well.</source>
<target xml:lang="pt">Also, we encourage our users to switch your script from Content.Load (which require "Mark as Root") to a field member that you can set within the editor using drag and drop. That will create an implicit dependency that will force that asset to be compiled as well.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en"><g id="1">Everything else (white)</g> (objects not marked as root and not referenced directly or indirectly by a root) <g id="2">won't be packaged</g></source>
<target xml:lang="pt"><g id="1">Everything else (white)</g> (objects not marked as root and not referenced directly or indirectly by a root) <g id="2">won't be packaged</g></target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/26968245.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/26968245.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">"Mark as root"</source>
<target xml:lang="pt">"Mark as root"</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">One important thing to understand is that "Mark as root" is not part of the asset, it is stored in the "current" package (the one that is in bold in the Solution Explorer).</source>
<target xml:lang="pt">One important thing to understand is that "Mark as root" is not part of the asset, it is stored in the "current" package (the one that is in bold in the Solution Explorer).</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">It means that if "MyGame" is current package, if you check "Mark as Root" on Silver Material (part of SharedPackage), this information will be stored in MyGame.sdpkg as part of the reference to SharedPackage.</source>
<target xml:lang="pt">It means that if "MyGame" is current package, if you check "Mark as Root" on Silver Material (part of SharedPackage), this information will be stored in MyGame.sdpkg as part of the reference to SharedPackage.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">As a result, you can use a shared package from multiple games even if you have different explicit roots.</source>
<target xml:lang="pt">As a result, you can use a shared package from multiple games even if you have different explicit roots.</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">For additional information about asset management, see <g id="1">Manage Assets</g></source>
<target xml:lang="pt">For additional information about asset management, see <g id="1">Manage Assets</g></target>
</trans-unit>
</body>
</file>
</xliff>