<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/engine/entity-component-model/index.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Entity-Component Model</source>
<target xml:lang="pt">Introdução ao ECS (Sistema de Entidades e Componentes)</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">[!INCLUDE <g id="1">stride-studio-note</g>]</source>
<target xml:lang="pt">Problema</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Overview</source>
<target xml:lang="pt"><g1>Cachorro</g1> é uma subclasse de <g2>Animal</g2>.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">@'Stride.Engine.Entity' is the base class for objects that are managed by the high-level engine.</source>
<target xml:lang="pt">Esse exemplo é frequentemente usado como um exemplo de herança
em introduções à programação. No entanto, quando as coisas se tornam mais complexas,
surgem problemas:</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">To improve flexibility, entity are component-based: they can contains as many components as required, containing data and/or logic.</source>
<target xml:lang="pt"><g1>Cachorro</g1> e <g2>Peixe</g2> podem nadar, então criamos uma classe intermediária <g3>AnimaisQueNadam</g3>.</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/7438980.png<x id="2"/></source>
<target xml:lang="pt"><g1>Abelha</g1> e <g2>Passaro</g2> podem voar, então criamos outra classe intermediária <g3>AnimaisQueVoam</g3>.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">A @'Stride.Engine.Entitycomponent' is tied to its entity (that is, one component can't be added to two entities at the same time).</source>
<target xml:lang="pt">O que fazemos agora com o &lt;g1&gt;Pato&lt;/g2&gt;, que pode fazer ambas as coisas?&lt;/g1&gt;</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">How to create an entity and some components</source>
<target xml:lang="pt">Temos o mesmo problema nos jogos eletrônicos.<x1/>
Inimigos podem andar, atirar, voar — mas nem todos podem fazer tudo.<x2/>
Até algo básico como pontos de vida não são universais, pois alguns inimigos são indestrutíveis.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">// Create entity
var myEntity = new Entity();
 
// Create a model component (so that model is rendered)
var modelComponent = new ModelComponent { Model = model };
myEntity.Set(ModelComponent.Key, modelComponent);

// Set entity position
myEntity.Transformation.Translation = new Vector3(100.0f, 100.0f, 0.0f);
 
// Add entity to scene; from now on its model will be rendered
Entities.Add(myEntity);
</source>
<target xml:lang="pt">Solução</target>
</trans-unit>
</body>
</file>
</xliff>