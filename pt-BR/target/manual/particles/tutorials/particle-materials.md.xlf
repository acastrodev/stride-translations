<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/particles/tutorials/particle-materials.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Tutorial: Particle materials</source>
<target xml:lang="pt">Tutorial: Materiais de partículas</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Programmer<x id="6"/></source>
<target xml:lang="pt">&lt;x1\/&gt; Intermediário &lt;x2\/&gt;
&lt;x3\/&gt;Artista &lt;x4\/&gt;
&lt;x5\/&gt;Programação&lt;x6\/&gt;</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">This tutorial demonstrates how to create custom shaders and materials for a particle system, providing functionality not available in the core engine. It focuses on shaders and rendering. For simulation, see the <g id="1">custom particles tutorial</g>.</source>
<target xml:lang="pt">Este tutorial demonstra como criar shaders personalizados e materiais para um sistema de partículas, fornecendo funcionalidade não disponível no motor central. Ele se concentra em shaders e renderização. Para a simulação, veja o tutorial <g id="1">custom partículas</g>.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">If you're not familiar with editing particles, see <g id="1">Create particles</g>.</source>
<target xml:lang="pt">Se você não estiver familiarizado com as partículas de edição, veja as partículas <g id="1">Create</g>.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Start by creating a new <g id="1">Sample: Particles</g> project.</source>
<target xml:lang="pt">Comece criando um novo <g id="1">Sample: Particles</g> projeto.</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Particles sample project<x id="2"/></source>
<target xml:lang="pt">&lt;x1\/&gt;Particles sample project&lt;x2\/&gt;</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">This project contains four scenes, each demonstrating a different way to use particles: <g id="1">AnimatedParticles</g>, <g id="2">ChildParticles</g>, <g id="3">CustomMaterials</g>, and <g id="4">CustomParticles</g>.</source>
<target xml:lang="pt">Este projeto contém quatro cenas, cada uma demonstrando uma maneira diferente de usar partículas: <g id="1">Partículas Animadas</g>, <g id="2">Partículas de Crianças</g>, <g id="3">Materiais personalizados</g>, e <g id="4">Partículas personalizadas</g>.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Open the <g id="1">CustomMaterials</g> scene.</source>
<target xml:lang="pt">Abra a cena <g id="1">CustomMaterials</g>.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">There are three particle entities in the scene: <g id="1">Rad Particle System</g>, <g id="2">Radial Particle System</g>, and <g id="3">Two Textures Particle System</g>.</source>
<target xml:lang="pt">Há três entidades de partículas no local: <g id="1">Rad Particle System</g>, <g id="2">Radial Particle System</g> e <g id="3">Dois Textures Particle System</g>.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-1.png<x id="2"/></source>
<target xml:lang="pt">&lt;x1\/&gt;media\/particles-samples-material-1.png&lt;x2\/&gt;</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Select one of the particle entities and navigate to its source particle system, expanding the emitter in it and its material.</source>
<target xml:lang="pt">Selecione uma das entidades de partículas e navegue até seu sistema de partículas de origem, expandindo a emissora nela e seu material.</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Red particle system</source>
<target xml:lang="pt">Sistema de partículas vermelhas</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">The <g id="1">red particle system</g> has a very simple customization. Since the <g id="2">material maps</g> already provide an option to use shaders as a leaf node input, we can create a custom shader and assign it to that node.</source>
<target xml:lang="pt">O sistema de partículas <g id="1">red</g> tem uma personalização muito simples. Como os mapas materiais <g id="2"/> já fornecem uma opção para usar shaders como uma entrada de nó de folha, podemos criar um shader personalizado e atribuí-lo a esse nó.</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">First, create a shader (<g id="1">ComputeColorRed.sdsl</g>) with a derived class for <g id="2">ComputeColor</g>:</source>
<target xml:lang="pt">Primeiro, crie um shader (<g id="1">ComputeColorRed.sdsl</g>) com uma classe derivada para <g id="2">ComputeColor</g>:</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 0, 0, 1);
  }
};
</source>
<target xml:lang="pt">classe ComputeColorRed : Cor da composição
(
  override float4 Compute()
  (
      retorno flutua4(1, 0, 0, 1);
  }
};
</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">The only thing this shader does is return the red color for pixel shading every time <g id="1">Compute</g> is called. We'll try something more difficult later, but for now let's keep it simple.</source>
<target xml:lang="pt">A única coisa que este shader faz é retornar a cor vermelha para pixel shading cada vez <g id="1">Compute</g> é chamado. Vamos tentar algo mais difícil mais tarde, mas por agora vamos mantê-lo simples.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Save the file and reload the scripts in Game Studio. You should see the new shader in <g id="1">Asset View</g>.</source>
<target xml:lang="pt">Salve o arquivo e recarregue os scripts no Game Studio. Você deve ver o novo shader em <g id="1">Asset View</g>.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-2.png<x id="2"/></source>
<target xml:lang="pt">&lt;x1\/&gt;media\/particles-samples-material-2.png&lt;x2\/&gt;</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">If the shader isn't there, reload the project.</source>
<target xml:lang="pt">Se o shader não estiver lá, recarregue o projeto.</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">Once the shader is loaded, you can access it in the <g id="1">Property Grid</g> under the <g id="2">dynamic emissive material</g> for the particles. Choose a type of shader and, from the drop-down menu, select the shader you just added to the scene.</source>
<target xml:lang="pt">Uma vez que o shader é carregado, você pode acessá-lo no <g id="1">Property Grid</g> sob o material emissivo dinâmico <g id="2"> para as partículas.</g> Escolha um tipo de shader e, no menu suspenso, selecione o shader que você acabou de adicionar à cena.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-3.png<x id="2"/></source>
<target xml:lang="pt">&lt;x1\/&gt;media\/particles-samples-material-3.png&lt;x2\/&gt;</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">The particles are red. With Game Studio running, edit and save <g id="1">ComputeColorRed.sdsl</g> to make them yellow.</source>
<target xml:lang="pt">As partículas são vermelhas. Com Game Studio executando, edite e salve <g id="1">ComputeColorRed.sdsl</g> para torná-los amarelos.</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">class ComputeColorRed : ComputeColor
{
  override float4 Compute()
  {
      return float4(1, 1, 0, 1);
  }
};
</source>
<target xml:lang="pt">classe ComputeColorRed : Cor da composição
(
  override float4 Compute()
  (
      retorno flutua4(1, 1, 0, 1);
  }
};
</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">Because Stride supports dynamic shader compilation, the particles immediately turn yellow.</source>
<target xml:lang="pt">Porque Stride suporta compilação de shader dinâmico, as partículas imediatamente ficam amarelas.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Radial particle system</source>
<target xml:lang="pt">Sistema de partículas radiais</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">For the next shader we'll use texture coordinates expose arbitrary values to the editor.</source>
<target xml:lang="pt">Para o próximo shader vamos usar coordenadas de textura expor valores arbitrários ao editor.</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en">Check <g id="1">ComputeColorRadial.sdsl</g>.</source>
<target xml:lang="pt">Verifique <g id="1">ComputeColorRadial.sdsl</g>.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en">class ComputeColorRadial&lt;float4 ColorCenter, float4 ColorEdge&gt; : ComputeColor, Texturing
{
  override float4 Compute()
  {
      float radialDistance = length(streams.TexCoord - float2(0.5, 0.5)) * 2;

      float4 unclamped = lerp(ColorCenter, ColorEdge, radialDistance);

      // We want to allow the intensity to grow a lot, but cap the alpha to 1
      float4 clamped = clamp(unclamped, float4(0, 0, 0, 0), float4(1000, 1000, 1000, 1));

      // Remember that we use a premultiplied alpha pipeline so all color values should be premultiplied
      clamped.rgb *= clamped.a;

      return clamped;
  }
};
</source>
<target xml:lang="pt">classe ComputeColorRadial&lt;float4 ColorCenter, float4 ColorEdge&gt; : ComputeColor, Texturing
(
  override float4 Compute()
  (
      radial flutuante Distância = comprimento (streams. TexCoord - float2(0.5, 0.5)) * 2;

      float4 unclamped = lerp(ColorCenter, ColorEdge, radialDistance);

      \/\/ Queremos permitir que a intensidade cresça muito, mas cap o alfa para 1
      float4 branqueado = braçadeira (inclampado, flutuador4(0, 0, 0, 0), flutuador4(1000, 1000, 1000, 1));

      \/\/ Lembre-se de que usamos um pipeline alfa pré-multiplicado para que todos os valores de cor devem ser pré-multiplicados
      braçada.rgb *= braçada.a;

      voltar fixado;
  }
};
</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">This is similar to <g id="1">ComputeColorRed</g> and can be compiled and loaded the same way.</source>
<target xml:lang="pt">Isso é semelhante a <g id="1">ComputeColorRed</g> e pode ser compilado e carregado da mesma maneira.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">There are several key differences. The shader now inherits from the <g id="1">Texturing</g> shader base class as well. This allows it to use texture coordinates in from the streams. On the material side in Game Studio, we can force the texture coordinates to be streamed in case we don't use texture animation.</source>
<target xml:lang="pt">Existem várias diferenças importantes. O shader agora herda do <g id="1">Texturing</g> classe base shader também. Isso permite que ele use coordenadas de textura nas correntes. No lado material do Game Studio, podemos forçar as coordenadas de textura a serem transmitidas caso não usemos animação de textura.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en">The input values <g id="1">float4 ColorCenter</g> and <g id="2">float4 ColorEdge</g> in our shader are permutations. When we load the shader the Property Grid displays them under the <g id="3">Generics</g> dictionary.</source>
<target xml:lang="pt">Os valores de entrada <g id="1">float4 ColorCenter</g> e <g id="2">float4 ColorEdge</g> em nosso shader são permutações. Quando carregamos o shader, o Property Grid os exibe sob o dicionário <g id="3">Generics</g>.</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-samples-material-4.png<x id="2"/></source>
<target xml:lang="pt">&lt;x1\/&gt;media\/particles-samples-material-4.png&lt;x2\/&gt;</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">The values we set here will be used by the <g id="1">ComputeColorRadial</g> shader for the particles. The rest of the shader simply calculates a gradient color based on the distance of the shaded pixel from the center of the billboard.</source>
<target xml:lang="pt">Os valores que estabelecemos aqui serão usados pelo shader <g id="1">ComputeColorRadial</g> para as partículas. O resto do shader simplesmente calcula uma cor gradiente com base na distância do pixel sombreado do centro do outdoor.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">Two-texture particle system</source>
<target xml:lang="pt">Sistema de partículas de duas texturas</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">This demonstrates how to create custom materials and effects for the particles. The <g id="1">DynamicColor</g> material supports one RGBA channel. For our sample, we'll separate the RGB and A channels, allowing them to use different texture coordinate animations and different textures and binary trees to compute the color.</source>
<target xml:lang="pt">Isso demonstra como criar materiais e efeitos personalizados para as partículas. O material <g id="1">DynamicColor</g> suporta um canal RGBA. Para a nossa amostra, separaremos os canais RGB e A, permitindo-lhes usar diferentes animações de coordenadas de textura e diferentes texturas e árvores binárias para calcular a cor.</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">Parameter keys</source>
<target xml:lang="pt">Chaves do parâmetro</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">Parameter keys are used to map data and pass it to the shader. Some of them are generated, and we can define our own too.</source>
<target xml:lang="pt">As chaves do parâmetro são usadas para mapear dados e passá-lo para o shader. Alguns deles são gerados, e podemos definir o nosso próprio também.</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">If we define more streams in our shader (<g id="1">ParticleCustomShader</g>), they're exported to an automatically generated class. Try adding the following to <g id="2">ParticleCustomShader.sdsl</g>:</source>
<target xml:lang="pt">Se definirmos mais fluxos em nosso shader (<g id="1">ParticleCustomShader</g>), eles são exportados para uma classe gerada automaticamente. Tente adicionar o seguinte a <g id="2">ParticleCustomShader.sdsl</g>:</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">  // -------------------------------------
  // streams
  // -------------------------------------
  stage float4 SomeRandomKey;
</source>
<target xml:lang="pt">  \/\/ -----------------------------------------
  \/\/ fluxos
  \/\/ -----------------------------------------
  flutuador de palco4 Alguns passos Chave;
</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">The generated .cs file should now contain:</source>
<target xml:lang="pt">O arquivo .cs gerado deve agora conter:</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  public static partial class ParticleCustomShaderKeys
  {
      public static readonly ParameterKey&lt;Vector4&gt; SomeRandomKey = ParameterKeys.New&lt;Vector4&gt;();
  }
}
</source>
<target xml:lang="pt">namespace Stride. Renderização
(
  classe parcial estática pública Shader Chaves
  (
      público estático somente leitura ParâmetroKey&lt;Vector4&gt; Alguns passos Chave = ParameterKeys.New&lt;Vector4&gt;();
  }
}
</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">We don't need this stream for now, so we can delete it.</source>
<target xml:lang="pt">Não precisamos deste fluxo por agora, então podemos excluí-lo.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">We'll define some extra keys in <g id="1">ParticleCustomMaterialKeys.cs</g> to use in our material and effects.</source>
<target xml:lang="pt">Vamos definir algumas chaves extras em <g id="1">ParticleCustomMaterialKeys.cs</g> para usar em nosso material e efeitos.</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  public partial class ParticleCustomShaderKeys
  {
      static ParticleCustomShaderKeys()
      {

      }

      public static readonly ParameterKey&lt;ShaderSource&gt; BaseColor     = ParameterKeys.New&lt;ShaderSource&gt;();

      public static readonly ParameterKey&lt;Texture&gt; EmissiveMap = ParameterKeys.New&lt;Texture&gt;();
      public static readonly ParameterKey&lt;Color4&gt; EmissiveValue = ParameterKeys.New&lt;Color4&gt;();



      public static readonly ParameterKey&lt;ShaderSource&gt; BaseIntensity = ParameterKeys.New&lt;ShaderSource&gt;();

      public static readonly ParameterKey&lt;Texture&gt; IntensityMap = ParameterKeys.New&lt;Texture&gt;();
      public static readonly ParameterKey&lt;float&gt; IntensityValue = ParameterKeys.New&lt;float&gt;();
  }
}
</source>
<target xml:lang="pt">namespace Stride. Renderização
(
  classe parcial pública ParticleCustomShaderKeys
  (
      partícula estáticaCustomShaderKeys()
      (

      }

      leitura estática pública ParâmetroKey&lt;ShaderSource&gt; BaseColor = ParâmetroKeys.New&lt;ShaderSource&gt;();

      público estático somente leitura ParâmetroKey&lt;Textura&gt; EmissiveMap = ParameterKeys.New&lt;Texture&gt;();&lt;Texture&gt;
      public static readonly ParâmetroKey&lt;Color4&gt; EmissiveValue = ParâmetroKeys.New&lt;Color4&gt;();



      leitura estática pública ParâmetroKey&lt;ShaderSource&gt; BaseIntensity = ParâmetroKeys.New&lt;ShaderSource&gt;();

      público estático somente leitura ParâmetroKey&lt;Textura&gt; Intensidade Mapa = ParameterKeys.New&lt;Texture&gt;();&lt;Texture&gt;
      público estático somente leitura ParâmetroKey&lt;float&gt; IntensityValue = ParâmetroKeys.New&lt;float&gt;();
  }
}
</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en">As we saw above, the generated class has the same name and the namespace is <g id="1">Stride.Rendering</g>, so we have to make our class partial and match the namespace. This has no effect on this specific sample, but will result in compilation error if your shader code auto-generates some keys.</source>
<target xml:lang="pt">Como vimos acima, a classe gerada tem o mesmo nome e o namespace é <g id="1">Stride.Rendering</g>, então temos que fazer nossa classe parcial e combinar o namespace. Isso não tem efeito nesta amostra específica, mas resultará em erro de compilação se o seu código shader auto-genera algumas chaves.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">The rest of the code is self-explanatory. We'll need the map and value keys for shader generation later, and we'll set our generated code to the <g id="1">BaseColor</g> and <g id="2">BaseIntensity</g> keys respectively so the shader can use it.</source>
<target xml:lang="pt">O resto do código é auto-explicativo. Precisamos do mapa e chaves de valor para a geração de shader mais tarde, e vamos definir nosso código gerado para o <g id="1">BaseColor</g> e <g id="2">BaseIntensity</g> chaves respectivamente para que o shader possa usá-lo.</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">Custom Shader</source>
<target xml:lang="pt">Shader personalizado</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en">Let's look at <g id="1">ParticleCustomShader.sdsl</g>:</source>
<target xml:lang="pt">Vamos ver <g id="1">ParticleCustomShader.sdsl</g>:</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">
class ParticleCustomShader : ParticleBase
{
  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseColor;

  // This shader can be set by the user, and it's a binary tree made up from smaller shaders
  compose ComputeColor  baseIntensity;

  // Shading of the sprite — we override the base class's Shading(), which only returns ColorScale
  stage override float4 Shading()
  {
      // -----------------------------------------------
      // Base particle color RGB
      // -----------------------------------------------
      float4 finalColor = base.Shading() * baseColor.Compute();

      // -----------------------------------------------
      // Base particle alpha
      // -----------------------------------------------
      finalColor.a    = baseIntensity.Compute();

      //  Don't forget to premultiply the alpha
      finalColor.rgb *= finalColor.aaa;

      return finalColor;
  }
};
</source>
<target xml:lang="pt">
classe ParticleCustom Shader.. Base de partículas
(
  \/\/ Este shader pode ser definido pelo usuário, e é uma árvore binária composta de shaders menores
  compor base de cores compostasCor;

  \/\/ Este shader pode ser definido pelo usuário, e é uma árvore binária composta de shaders menores
  compor ComputeColor baseIntensidade;

  \/\/ Shading of the sprite — nós substituímos o Shading( da classe base), que só retorna ColorScale
  sobreposição de palco float4 Shading()
  (
      \/\/ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      \/\/ Cor da partícula base RGB
      \/\/ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      float4 finalColor = base.Shading() * baseColor.Compute();

      \/\/ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      \/\/ Partícula base alfa
      \/\/ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      finalColor.a = baseIntensity.Compute();

      \/\/ Não se esqueça de multiplicar o alfa
      finalColor.rgb *= finalColor.aaa;

      final de retorno Cor;
  }
};
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">It defines two composed shaders, <g id="1">baseColor</g> and <g id="2">abseIntensity</g>, where we'll plug our generated shaders for RGB and A respectively. It inherits <g id="3">ParticleBase</g> which already defines <g id="4">VSMain</g>, <g id="5">PSMain</g> and texturing, and uses very simple <g id="6">Shading()</g> method.</source>
<target xml:lang="pt">Ele define dois shaders compostos, <g id="1">baseColor</g> e <g id="2">abseIntensity</g>, onde vamos conectar nossos shaders gerados para RGB e A respectivamente. Ele herda <g id="3">ParticleBase</g> que já define <g id="4">VSMain</g>, <g id="5">PSMain</g> e texturing, e usa método muito simples <g id="6">Shading()</g>.</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en">By overriding the <g id="1">Shading()</g> method we can define our custom behavior. Because the composed shaders we use are derived from <g id="2">ComputeColor</g>, we can easily evaluate them using <g id="3">Compute()</g>, which gives us the root of the compute tree for color and intensity.</source>
<target xml:lang="pt">Ao substituir o método <g id="1">Shading()</g> podemos definir nosso comportamento personalizado. Como os shaders compostos que usamos são derivados de <g id="2">ComputeColor</g>, podemos facilmente avaliá-los usando <g id="3">Compute()</g>, o que nos dá a raiz da árvore de computação para cor e intensidade.</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">Custom effect</source>
<target xml:lang="pt">Efeito aduaneiro</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">Our effect describes how to mix and compose the shaders. It's in <g id="1">ParticleCustomEffect.sdfx</g>:</source>
<target xml:lang="pt">Nosso efeito descreve como misturar e compor os shaders. Está em <g id="1">ParticleCustomEffect.sdfx</g>:</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en">namespace Stride.Rendering
{
  partial shader ParticleCustomEffect
  {
      // Use the ParticleBaseKeys for constant attributes, defined in the game engine
      using params ParticleBaseKeys;

      // Use the ParticleCustomShaderKeys for constant attributes, defined in this project
      using params ParticleCustomShaderKeys;

      // Inherit from the ParticleBaseEffect.sdfx, defined in the game engine
      mixin ParticleBaseEffect;

      // Use the ParticleCustomShader.sdsl, defined in this project
      mixin ParticleCustomShader;

      // If the user-defined shader for the baseColor is not null use it
      if (ParticleCustomShaderKeys.BaseColor != null)
      {
          mixin compose baseColor = ParticleCustomShaderKeys.BaseColor;
      }

      // If the user-defined shader for the baseIntensity (alpha) is not null use it
      if (ParticleCustomShaderKeys.BaseIntensity != null)
      {
          mixin compose baseIntensity = ParticleCustomShaderKeys.BaseIntensity;
      }

 };

}
</source>
<target xml:lang="pt">namespace Stride. Renderização
(
  particleCustomEffect
  (
      \/\/ Use o ParticleBaseKeys para atributos constantes, definidos no motor de jogo
      usando params ParticleBaseKeys;

      \/\/ Use o ParticleCustom Shader Chaves para atributos constantes, definidas neste projeto
      usando params Teste de partículas Shader Chaves;

      \/\/ Herda do ParticleBaseEffect.sdfx, definido no motor do jogo
      mixin ParticleBaseEffect;

      \/\/ Use o ParticleCustomShader.sdsl, definido neste projeto
      misturador de partículas Shader;

      \/\/ Se o shader definido pelo usuário para a baseColor não é nulo usá-lo
      se (ParticleCustomShaderKeys.BaseColor!= null)
      (
          mixin compose baseCor = ParticleCustomShaderKeys.BaseColor;
      }

      \/\/ Se o shader definido pelo usuário para a baseIntensidade (alpha) não é nulo usá-lo
      se (ParticleCustomShaderKeys.BaseIntensity!= null)
      (
          base de composição da misturaIntensidade = ParticleCustomShaderKeys.BaseIntensidade;
      }

 };

}
</target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en"><g id="1">ParticleBaseKeys</g> and <g id="2">ParticleBaseEffect</g> are required by the base shader which we inherit.</source>
<target xml:lang="pt"><g id="1">ParticleBaseKeys</g> e <g id="2">ParticleBaseEffect</g> são exigidos pelo shader base que herdamos.</target>
</trans-unit>
<trans-unit id="tu56" xml:space="preserve">
<source xml:lang="en"><g id="1">ParticleCustomShaderKeys</g> provides the keys we defined earlier, where we'll plug our shaders.</source>
<target xml:lang="pt"><g id="1">ParticleCustomShaderKeys</g> fornece as chaves definidas anteriormente, onde vamos ligar nossos shaders.</target>
</trans-unit>
<trans-unit id="tu57" xml:space="preserve">
<source xml:lang="en">Finally, for both shaders we only need to check if there is user-defined code for it and plug it. The <g id="1">baseColor</g> and <g id="2">baseIntensity</g> parameters are from the shader we created earlier.</source>
<target xml:lang="pt">Finalmente, para ambos os shaders só precisamos verificar se há código definido pelo usuário para ele e conectá-lo. Os parâmetros <g id="1">baseColor</g> e <g id="2">baseIntensity</g> são do shader que criamos anteriormente.</target>
</trans-unit>
<trans-unit id="tu58" xml:space="preserve">
<source xml:lang="en">Last, we need a material which sets all the keys and uses the newly created effect.</source>
<target xml:lang="pt">Por último, precisamos de um material que define todas as chaves e usa o efeito recém-criado.</target>
</trans-unit>
<trans-unit id="tu59" xml:space="preserve">
<source xml:lang="en">Custom particle material</source>
<target xml:lang="pt">Material de partícula personalizado</target>
</trans-unit>
<trans-unit id="tu60" xml:space="preserve">
<source xml:lang="en">We'll copy @'Stride.Particles.Materials.ParticleMaterialComputeColor' into <g id="1">ParticleCustomMaterial.cs</g> in our project and customize it to use two shaders for color binary trees.</source>
<target xml:lang="pt">Vamos copiar @'Stride.Particles.Materials.ParticleMaterialComputeColor' em <g id="1">ParticleCustomMaterial.cs</g> em nosso projeto e personalizá-lo para usar dois shaders para árvores binárias de cor.</target>
</trans-unit>
<trans-unit id="tu61" xml:space="preserve">
<source xml:lang="en">      [DataMemberIgnore]
      protected override string EffectName { get; set; } = "ParticleCustomEffect";
</source>
<target xml:lang="pt">      [DataMemberIgnore]
      protegido override string EffectName { get; set; } = "ParticleCustomEffect";
</target>
</trans-unit>
<trans-unit id="tu62" xml:space="preserve">
<source xml:lang="en">The base class automatically tries to load the effect specified with <g id="1">EffectName</g>. We give it the name of the effect we crated earlier.</source>
<target xml:lang="pt">A classe base tenta carregar automaticamente o efeito especificado com <g id="1">EffectName</g>. Damos-lhe o nome do efeito que crated anteriormente.</target>
</trans-unit>
<trans-unit id="tu63" xml:space="preserve">
<source xml:lang="en">      [DataMember(300)]
      [Display("Alpha")]
      public IComputeScalar ComputeScalar { get; set; } = new ComputeTextureScalar();

      [DataMember(400)]
      [Display("TexCoord1")]
      public UVBuilder UVBuilder1;
      private AttributeDescription texCoord1 = new AttributeDescription("TEXCOORD1");
</source>
<target xml:lang="pt">      [DataMember(300)]
      [Display("Alpha")]
      public IComputeScalar ComputeScalar { get; set; } = new ComputeTextureScalar();

      [DataMember(400)]
      [Display("TexCoord1")]
      construção UV pública1;
      atributo privadoDescrição texCoord1 = nova AtributeDescription("TEXCOORD1");
</target>
</trans-unit>
<trans-unit id="tu64" xml:space="preserve">
<source xml:lang="en">In addition to the already existing @'Stride.Rendering.Materials.IComputeColor', we'll use @'Stride.Rendering.Materials.IComputeScalar' for intensity, which returns a float, rather than a float4. We will also add another  @'Stride.Particles.Materials.UVBuilder' for a second texture coordinates animation.</source>
<target xml:lang="pt">Além do já existente @'Stride.Rendering. Materials.IComputeColor', vamos usar @'Stride.Rendering. Materials.IComputeScalar' para intensidade, que retorna um flutuador, em vez de um flutuador4. Também adicionaremos outro @'Stride.Particles. Materials.UVBuilder' para uma segunda textura coordena animação.</target>
</trans-unit>
<trans-unit id="tu65" xml:space="preserve">
<source xml:lang="en">  var shaderBaseColor = ComputeColor.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.EmissiveMap, ParticleCustomShaderKeys.EmissiveValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseColor, shaderBaseColor);

  var shaderBaseScalar = ComputeScalar.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys(ParticleCustomShaderKeys.IntensityMap, ParticleCustomShaderKeys.IntensityValue, Color.White));
  shaderGeneratorContext.Parameters.Set(ParticleCustomShaderKeys.BaseIntensity, shaderBaseScalar);
</source>
<target xml:lang="pt">  var shaderBaseColor = ComputeColor.GenerateShaderSource (shaderGeneratorContext, novo MaterialColorKeysCompute (ParticleCustomShaderKeys.EmissiveMap, ParticleCustomShaderKeys.EmissiveValue, Color.White));
  shaderGeneratorContext.Parameters.Set (ParticleCustomShaderKeys.BaseColor, shaderBaseColor);

  var shader BaseScalar = ComputeScalar.GenerateShaderSource(shaderGeneratorContext, new MaterialComputeColorKeys (ParticleCustomShaderKeys.IntensityMap, ParticleCustomShaderKeys.IntensityValue, Color.White));
  shaderGeneratorContext.Parameters.Set (ParticleCustomShaderKeys.BaseIntensity, shaderBaseScalar);
</target>
</trans-unit>
<trans-unit id="tu66" xml:space="preserve">
<source xml:lang="en">We load the two shaders: one for the main color and one for the intensity. These are similar to the shaders we wrote manually in the last two examples, except we generate them on the fly directly from the <g id="1">ComputeColor</g> and <g id="2">ComputeScalar</g> properties, which you can edit in the Property Grid. The generated code is similar to the shader code we wrote in the way that it calls <g id="3">Compute()</g> and it returns the final result of our color or scalar compute tree.</source>
<target xml:lang="pt">Nós carregamos os dois shaders: um para a cor principal e um para a intensidade. Estes são semelhantes aos shaders que escrevemos manualmente nos dois últimos exemplos, exceto que os geramos na mosca diretamente das propriedades <g id="1">ComputeColor</g> e <g id="2">ComputeScalar</g>, que você pode editar na Grade de Propriedade. O código gerado é semelhante ao código do shader que escrevemos da maneira que ele chama <g id="3">Compute()</g> e retorna o resultado final de nossa árvore de computação de cor ou escalar.</target>
</trans-unit>
<trans-unit id="tu67" xml:space="preserve">
<source xml:lang="en">After we generate the shader code, we set it to the respective key we need. Check how <g id="1">ParticleCustomShaderKeys.BaseColor</g> is defined in <g id="2">ParticleCustomShaderKeys.cs</g>. In the effect file we check if this key is set, and if yes, we pass it to the stream defined in our shader code.</source>
<target xml:lang="pt">Depois de gerar o código do shader, definimo-lo para a respectiva chave que precisamos. Verifique como <g id="1">ParticleCustomShaderKeys.BaseColor</g> é definido em <g id="2">ParticleCustomShaderKeys.cs</g>. No arquivo de efeito verificamos se esta chave é definida, e se sim, passamos para o fluxo definido em nosso código de shader.</target>
</trans-unit>
<trans-unit id="tu68" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">Ver também</target>
</trans-unit>
<trans-unit id="tu69" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Create a trail</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Criar uma trilha</g></target>
</trans-unit>
<trans-unit id="tu70" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Custom particles</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Partículas personalizadas</g></target>
</trans-unit>
<trans-unit id="tu71" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Inheritance</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Herança</g></target>
</trans-unit>
<trans-unit id="tu72" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Lasers and lightning</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Lasers e raios</g></target>
</trans-unit>
<trans-unit id="tu73" xml:space="preserve">
<source xml:lang="en"><g id="1">Particles</g></source>
<target xml:lang="pt"><g id="1">Partes</g></target>
</trans-unit>
<trans-unit id="tu74" xml:space="preserve">
<source xml:lang="en"><g id="1">Create particles</g></source>
<target xml:lang="pt"><g id="1">Criar partículas</g></target>
</trans-unit>
</body>
</file>
</xliff>