<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/virtual-reality/enable-vr.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Enable VR</source>
<target xml:lang="pt">Enable VR</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/></source>
<target xml:lang="pt"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">This page explains how to add support for the Oculus Rift and Vive devices to your game. Stride doesn't support other VR devices yet.</source>
<target xml:lang="pt">This page explains how to add support for the Oculus Rift and Vive devices to your game. Stride doesn't support other VR devices yet.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">In the <g id="1">Asset View</g> (in the bottom pane by default), double-click the <g id="2">Graphics Compositor</g> asset.</source>
<target xml:lang="pt">In the <g id="1">Asset View</g> (in the bottom pane by default), double-click the <g id="2">Graphics Compositor</g> asset.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Graphics compositor asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Graphics compositor asset<x id="2"/></target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">The graphics compositor editor opens.</source>
<target xml:lang="pt">The graphics compositor editor opens.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">In the graphics compositor editor, select the <g id="1">forward renderer</g> node.</source>
<target xml:lang="pt">In the graphics compositor editor, select the <g id="1">forward renderer</g> node.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Select forward renderer<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Select forward renderer<x id="2"/></target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">In the <g id="1">Property Grid</g> (on the right by default), expand <g id="2">VR Settings</g>.</source>
<target xml:lang="pt">In the <g id="1">Property Grid</g> (on the right by default), expand <g id="2">VR Settings</g>.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><x id="1"/>VR settings<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>VR settings<x id="2"/></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Next to <g id="1">Required APIs</g>, click <x id="2"/>Green plus button<x id="3"/> (<g id="4">Add</g>).</source>
<target xml:lang="pt">Next to <g id="1">Required APIs</g>, click <x id="2"/>Green plus button<x id="3"/> (<g id="4">Add</g>).</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Game Studio adds a new API to the list.</source>
<target xml:lang="pt">Game Studio adds a new API to the list.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Add VR item<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Add VR item<x id="2"/></target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">From the <g id="1">Item</g> drop-down menu, select a VR API you want your game to support.</source>
<target xml:lang="pt">From the <g id="1">Item</g> drop-down menu, select a VR API you want your game to support.</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Add API<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Add API<x id="2"/></target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">API</source>
<target xml:lang="pt">API</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Description</source>
<target xml:lang="pt">Description</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">Oculus</source>
<target xml:lang="pt">Oculus</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">Supports Oculus Rift devices (best support for Oculus Rift)</source>
<target xml:lang="pt">Supports Oculus Rift devices (best support for Oculus Rift)</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">OpenVR</source>
<target xml:lang="pt">OpenVR</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">Supports Vive and Oculus Rift devices (best support for Vive)</source>
<target xml:lang="pt">Supports Vive and Oculus Rift devices (best support for Vive)</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">Dummy</source>
<target xml:lang="pt">Dummy</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">Displays the game on the screen with two cameras (one per eye), instead of in the VR device. This is mainly useful for development. To display the dummy view in the Game Studio Scene Editor, make sure the editor is connected to the forward renderer.</source>
<target xml:lang="pt">Displays the game on the screen with two cameras (one per eye), instead of in the VR device. This is mainly useful for development. To display the dummy view in the Game Studio Scene Editor, make sure the editor is connected to the forward renderer.</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">Repeat steps 4 and 5 to add as many APIs as you need.</source>
<target xml:lang="pt">Repeat steps 4 and 5 to add as many APIs as you need.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Make sure the list order is correct. When your game runs, it attempts to use the devices in the list order. For example, if the first item is Dummy, the game uses no VR device. If the last item is Dummy, the game only uses it if there is no VR device available.</source>
<target xml:lang="pt">Make sure the list order is correct. When your game runs, it attempts to use the devices in the list order. For example, if the first item is Dummy, the game uses no VR device. If the last item is Dummy, the game only uses it if there is no VR device available.</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">To change the order, change the selected VR device in each item.</source>
<target xml:lang="pt">To change the order, change the selected VR device in each item.</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Tip<x id="2"/>
Although the OpenVR API supports both Vive and Oculus Rift devices, the Oculus API provides better support for Oculus Rift. For this reason, we recommend the following list order for most situations:</source>
<target xml:lang="pt"><x id="1"/>!Tip<x id="2"/>
Although the OpenVR API supports both Vive and Oculus Rift devices, the Oculus API provides better support for Oculus Rift. For this reason, we recommend the following list order for most situations:</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en">Item 0: Oculus</source>
<target xml:lang="pt">Item 0: Oculus</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">Item 1: OpenVR</source>
<target xml:lang="pt">Item 1: OpenVR</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">This means your game uses the Oculus API if an Oculus Rift device is connected, and the OpenVR API if another device (eg a Vive) is connected.</source>
<target xml:lang="pt">This means your game uses the Oculus API if an Oculus Rift device is connected, and the OpenVR API if another device (eg a Vive) is connected.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en">Enable <g id="1">VRRendererSettings</g>.</source>
<target xml:lang="pt">Enable <g id="1">VRRendererSettings</g>.</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en"><x id="1"/>VR renderer settings<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>VR renderer settings<x id="2"/></target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">Your game is now ready to use VR.</source>
<target xml:lang="pt">Your game is now ready to use VR.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
After you change APIs, you need to reload the project (<g id="3">File &gt; Reload project</g>) for the change to take effect at runtime.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
After you change APIs, you need to reload the project (<g id="3">File &gt; Reload project</g>) for the change to take effect at runtime.</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">VR properties</source>
<target xml:lang="pt">VR properties</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">Property</source>
<target xml:lang="pt">Property</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">Description</source>
<target xml:lang="pt">Description</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">Ignore camera rotation</source>
<target xml:lang="pt">Ignore camera rotation</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">Disable camera movement from inputs other than VR devices, helping to reduce <g id="1">VR sickness</g></source>
<target xml:lang="pt">Disable camera movement from inputs other than VR devices, helping to reduce <g id="1">VR sickness</g></target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">Resolution scale</source>
<target xml:lang="pt">Resolution scale</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">The resolution of the image displayed in the VR device. Higher resolutions produce better images, but require more GPU.</source>
<target xml:lang="pt">The resolution of the image displayed in the VR device. Higher resolutions produce better images, but require more GPU.</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">Multisample anti-aliasing</source>
<target xml:lang="pt">Multisample anti-aliasing</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">As aliasing artifacts are more obvious in VR, we recommend you enable <g id="1">MSAA</g> (multisample anti-aliasing) in the forward renderer properties (above the VR settings).</source>
<target xml:lang="pt">As aliasing artifacts are more obvious in VR, we recommend you enable <g id="1">MSAA</g> (multisample anti-aliasing) in the forward renderer properties (above the VR settings).</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en"><x id="1"/>MSAA<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>MSAA<x id="2"/></target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
MSAA isn't supported for Direct3D 11 or lower.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
MSAA isn't supported for Direct3D 11 or lower.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">Disable screen synchronization</source>
<target xml:lang="pt">Disable screen synchronization</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">For best performance, VR games need to run at 90FPS. This means you have to turn off synchronization with your monitor.</source>
<target xml:lang="pt">For best performance, VR games need to run at 90FPS. This means you have to turn off synchronization with your monitor.</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en">For now, this is done in a script. We recommend you use <g id="1">IsDrawDesynchronized</g> in <g id="2">IsFixedTimeStep</g>.</source>
<target xml:lang="pt">For now, this is done in a script. We recommend you use <g id="1">IsDrawDesynchronized</g> in <g id="2">IsFixedTimeStep</g>.</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">using System;
using Stride.Engine;

namespace VRSandbox
{
    class VRSandboxApp
    {
        static void Main(string[] args)
        {
            using (var game = new Game())
            {
                //VR needs to run at 90 fps, vsync must be disabled, draw must be not synchronized
                //You might want to set physics time step to 90 fps as well if you use character controller with unregular movements, but please avoid that! use Kinematic rigidbodies when possible.
                game.IsFixedTimeStep = true;
                game.IsDrawDesynchronized = true;
                game.GraphicsDeviceManager.SynchronizeWithVerticalRetrace = false;
                game.TargetElapsedTime = TimeSpan.FromSeconds(1 / 90.0f);
                game.Run();
            }
        }
    }
}
</source>
<target xml:lang="pt">using System;
using Stride.Engine;

namespace VRSandbox
{
    class VRSandboxApp
    {
        static void Main(string[] args)
        {
            using (var game = new Game())
            {
                //VR needs to run at 90 fps, vsync must be disabled, draw must be not synchronized
                //You might want to set physics time step to 90 fps as well if you use character controller with unregular movements, but please avoid that! use Kinematic rigidbodies when possible.
                game.IsFixedTimeStep = true;
                game.IsDrawDesynchronized = true;
                game.GraphicsDeviceManager.SynchronizeWithVerticalRetrace = false;
                game.TargetElapsedTime = TimeSpan.FromSeconds(1 / 90.0f);
                game.Run();
            }
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en"><g id="1">VR sickness</g></source>
<target xml:lang="pt"><g id="1">VR sickness</g></target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en"><g id="1">Graphics compositor</g></source>
<target xml:lang="pt"><g id="1">Graphics compositor</g></target>
</trans-unit>
</body>
</file>
</xliff>