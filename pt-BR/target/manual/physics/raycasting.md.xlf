<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/physics/raycasting.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Raycasting</source>
<target xml:lang="pt">Raycasting</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Programmer<x id="4"/></source>
<target xml:lang="pt"><x id="1"/>Intermediário<x id="2"/>
<x id="3"/>Programação<x id="4"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en"><g id="1">Raycasting</g> traces an invisible line through the scene to find intersecting <g id="2">colliders</g>. This is useful, for example, to check which objects are in a gun's line of fire, or are under the mouse cursor when the user clicks.</source>
<target xml:lang="pt"><g id="1">Raycasting</g> traça uma linha invisível através da cena para encontrar intersectando <g id="2">colliders</g>. Isso é útil, por exemplo, para verificar quais objetos estão na linha de fogo de uma arma, ou estão sob o cursor do mouse quando o usuário clica.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
Raycasting uses <g id="3">colliders</g> to calculate intersections. It ignores entities that have no collider component. For more information, see <g id="4">Colliders</g>.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Raycasting usa <g id="3">colliders</g> para calcular interseções. Ele ignora entidades que não têm componente de colisão. Para mais informações, consulte <g id="4">Colliders</g>.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">To use a raycast, in the current <g id="1">Simulation</g>, use <x id="2"/>Simulation.Raycast<x id="3"/>(xref:Stride.Physics.Simulation.Raycast(Vector3, Vector3, CollisionFilterGroups, CollisionFilterGroupFlags, bool)).</source>
<target xml:lang="pt">Para usar um raycast, na corrente <g id="1">Simulation</g>, use <x id="2"/>Simulation.Raycast<x id="3"/>(xref:Stride.Physics.Simulation.Raycast(Vector3, Vector3, CollisionFilter Grupos, CollisionFilterGroupFlags, bool)).</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">For an example of raycasting, see the <g id="1">Physics Sample</g> project included with Stride.</source>
<target xml:lang="pt">Por exemplo, veja o projeto <g id="1">Physics Sample</g> incluído no Stride.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">Example code</source>
<target xml:lang="pt">Exemplo de código</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">This code sends a raycast from the mouse's screen position:</source>
<target xml:lang="pt">Este código envia um raycast da posição da tela do mouse:</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">public static bool ScreenPositionToWorldPositionRaycast(Vector2 screenPos, CameraComponent camera, Simulation simulation)
{
    Matrix invViewProj = Matrix.Invert(camera.ViewProjectionMatrix);

    // Reconstruct the projection-space position in the (-1, +1) range.
    //    Don't forget that Y is down in screen coordinates, but up in projection space
    Vector3 sPos;
    sPos.X = screenPos.X * 2f - 1f;
    sPos.Y = 1f - screenPos.Y * 2f;

    // Compute the near (start) point for the raycast
    // It's assumed to have the same projection space (x,y) coordinates and z = 0 (lying on the near plane)
    // We need to unproject it to world space
    sPos.Z = 0f;
    var vectorNear = Vector3.Transform(sPos, invViewProj);
    vectorNear /= vectorNear.W;

    // Compute the far (end) point for the raycast
    // It's assumed to have the same projection space (x,y) coordinates and z = 1 (lying on the far plane)
    // We need to unproject it to world space
    sPos.Z = 1f;
    var vectorFar = Vector3.Transform(sPos, invViewProj);
    vectorFar /= vectorFar.W;

    // Raycast from the point on the near plane to the point on the far plane and get the collision result
    var result = simulation.Raycast(vectorNear.XYZ(), vectorFar.XYZ());
    return result.Succeeded;
}
</source>
<target xml:lang="pt">bool estático público ScreenPositionToWorldPositionRaycast(Vector2 screenPos, CameraComponent câmera, Simulação)
(
    Matrix invViewProj = Matrix.Invert (camera.ViewProjectionMatrix);

    // Reconstrua a posição do espaço de projeção no intervalo (-1, +1).
    // Não se esqueça que Y está em coordenadas de tela, mas em espaço de projeção
    Vector3 sPos;
    sPos.X = screenPos.X * 2f - 1f;
    sPos.Y = 1f - screenPos.Y * 2f;

    // Compute o ponto próximo (start) para o raycast
    // Assume-se que tenha as mesmas coordenadas de espaço de projeção (x,y) e z = 0 (de pé no plano próximo)
    // Precisamos de desprojetá-lo para o espaço mundial
    sPos.Z = 0f;
    var vectorNear = Vector3.Transform(sPos, invViewProj);
    vectorNear /= vectorNear.W;

    // Compute o ponto distante (fim) para o raycast
    // Assume-se que tenha as mesmas coordenadas de espaço de projeção (x,y) e z = 1 (de pé no plano distante)
    // Precisamos de desprojetá-lo para o espaço mundial
    sPos.Z = 1f;
    variação Far = Vector3.Transform(sPos, invViewProj);
    vectorFar /= vectorFar.W;

    // Raycast do ponto no avião próximo ao ponto no avião distante e obter o resultado da colisão
    var result = simulação. Raycast(vectorNear.XYZ(), vectorFar.XYZ());
    resultado de retorno. Sucedida;
}
</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
There are multiple ways to retrieve a reference to this <g id="3">Simulation</g> from inside one of your <g id="4">ScriptComponent</g>:</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Existem várias maneiras de recuperar uma referência a este <g id="3">Simulation</g> de dentro de um de seu <g id="4">ScriptComponent</g>:</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">The recommended way is through a reference to a physics component, something like <g id="1">myRigidBody.Simulation</g> or <g id="2">myCollision.Simulation</g> as it is the fastest.</source>
<target xml:lang="pt">A maneira recomendada é através de uma referência a um componente de física, algo como <g id="1">myRigidBody.Simulation</g> ou <g id="2">myCollision. Simulação</g> como é o mais rápido.</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">Then through <g id="1">SceneSystem</g> by calling <g id="2">SceneSystem.SceneInstance.GetProcessor&lt;PhysicsProcessor&gt;()?.Simulation</g>.</source>
<target xml:lang="pt">Então através de <g id="1">SceneSystem</g> chamando <g id="2">SceneSystem.SceneInstance.GetProcessor&lt;PhysicsProcessor&gt;()?Simulação</g>.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">Or through <g id="1">this.GetSimulation()</g>, note that the <g id="2">this</g> is required as it is an extension method.</source>
<target xml:lang="pt">Ou através de <g id="1">this.GetSimulation()</g>, note que o <g id="2">this</g> é necessário como é um método de extensão.</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">Ver também</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><g id="1">Colliders</g></source>
<target xml:lang="pt"><g id="1">Coleiras</g></target>
</trans-unit>
</body>
</file>
</xliff>