<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/graphics/low-level-api/pipeline-state.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Pipeline states</source>
<target xml:lang="pt">Pipeline states</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Stride gives you total control over the graphics pipeline state. This includes:</source>
<target xml:lang="pt">Stride gives you total control over the graphics pipeline state. This includes:</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">rasterizer state</source>
<target xml:lang="pt">rasterizer state</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">depth and stencil state</source>
<target xml:lang="pt">depth and stencil state</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">blend state</source>
<target xml:lang="pt">blend state</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">effects</source>
<target xml:lang="pt">effects</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">input layout</source>
<target xml:lang="pt">input layout</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">output description</source>
<target xml:lang="pt">output description</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">State is compiled into immutable @'Stride.Graphics.PipelineState' objects, which describe the whole pipeline. They are then bound using a @'Stride.Graphics.CommandList'.</source>
<target xml:lang="pt">State is compiled into immutable @'Stride.Graphics.PipelineState' objects, which describe the whole pipeline. They are then bound using a @'Stride.Graphics.CommandList'.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Create state objects</source>
<target xml:lang="pt"><g id="1">Code:</g> Create state objects</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">// Creating pipeline state object
var pipelineStateDescription = new PipelineStateDescription();
var pipelineState = PipelineState.New(GraphicsDevice, ref pipelineStateDescription);
 
// Applying the state to the pipeline
CommandList.SetPipelineState(pipelineState);
</source>
<target xml:lang="pt">// Creating pipeline state object
var pipelineStateDescription = new PipelineStateDescription();
var pipelineState = PipelineState.New(GraphicsDevice, ref pipelineStateDescription);
 
// Applying the state to the pipeline
CommandList.SetPipelineState(pipelineState);
</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">The @'Stride.Graphics.MutablePipelineState' class let you set states independently, while caching the underlying pipeline states.</source>
<target xml:lang="pt">The @'Stride.Graphics.MutablePipelineState' class let you set states independently, while caching the underlying pipeline states.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Mutable pipeline state</source>
<target xml:lang="pt"><g id="1">Code:</g> Mutable pipeline state</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">// Creating the pipeline state object
var mutablePipelineState = new MutablePipelineState();

// Setting values and rebuilding
mutablePipelineState.State.BlendState = BlendStates.AlphaBlend
mutablePipelineState.Update
 
// Applying the state to the pipeline
CommandList.SetPipelineState(mutablePipelineState.CurrentState);
</source>
<target xml:lang="pt">// Creating the pipeline state object
var mutablePipelineState = new MutablePipelineState();

// Setting values and rebuilding
mutablePipelineState.State.BlendState = BlendStates.AlphaBlend
mutablePipelineState.Update
 
// Applying the state to the pipeline
CommandList.SetPipelineState(mutablePipelineState.CurrentState);
</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">Rasterizer state</source>
<target xml:lang="pt">Rasterizer state</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">The rasterizer can be set using the @'Stride.Graphics.PipelineStateDescription.RasterizerState' property. A set of predefined descriptions is held by the @'Stride.Graphics.RasterizerStates' class. They deal with the cull mode, and should be enough for most use cases:</source>
<target xml:lang="pt">The rasterizer can be set using the @'Stride.Graphics.PipelineStateDescription.RasterizerState' property. A set of predefined descriptions is held by the @'Stride.Graphics.RasterizerStates' class. They deal with the cull mode, and should be enough for most use cases:</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.RasterizerStates.CullNone': no culling</source>
<target xml:lang="pt">@'Stride.Graphics.RasterizerStates.CullNone': no culling</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.RasterizerStates.CullFront': front-face culling</source>
<target xml:lang="pt">@'Stride.Graphics.RasterizerStates.CullFront': front-face culling</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.RasterizerStates.CullBack': back-face culling</source>
<target xml:lang="pt">@'Stride.Graphics.RasterizerStates.CullBack': back-face culling</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Set the cull mode</source>
<target xml:lang="pt"><g id="1">Code:</g> Set the cull mode</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">pipelineStateDescription.RasterizerState = RasterizerStates.CullNone;
pipelineStateDescription.RasterizerState = RasterizerStates.CullFront;
pipelineStateDescription.RasterizerState = RasterizerStates.CullBack;
</source>
<target xml:lang="pt">pipelineStateDescription.RasterizerState = RasterizerStates.CullNone;
pipelineStateDescription.RasterizerState = RasterizerStates.CullFront;
pipelineStateDescription.RasterizerState = RasterizerStates.CullBack;
</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">You can create your own custom state. For the list of options and default values, see the @'Stride.Graphics.RasterizerStateDescription' API documentation.</source>
<target xml:lang="pt">You can create your own custom state. For the list of options and default values, see the @'Stride.Graphics.RasterizerStateDescription' API documentation.</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Custom rasterizer states</source>
<target xml:lang="pt"><g id="1">Code:</g> Custom rasterizer states</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">var rasterizerStateDescription = new RasterizerStateDescription(CullMode.Front);
rasterizerStateDescription.ScissorTestEnable = true; // enables the scissor test
pipelineStateDescription.RasterizerState = rasterizerStateDescription;
</source>
<target xml:lang="pt">var rasterizerStateDescription = new RasterizerStateDescription(CullMode.Front);
rasterizerStateDescription.ScissorTestEnable = true; // enables the scissor test
pipelineStateDescription.RasterizerState = rasterizerStateDescription;
</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Depth and stencil states</source>
<target xml:lang="pt">Depth and stencil states</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">The @'Stride.Graphics.PipelineStateDescription.DepthStencilState' property contains the depth and stencil states. A set of commonly used states is defined by the @'Stride.Graphics.DepthStencilStates' class:</source>
<target xml:lang="pt">The @'Stride.Graphics.PipelineStateDescription.DepthStencilState' property contains the depth and stencil states. A set of commonly used states is defined by the @'Stride.Graphics.DepthStencilStates' class:</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.DepthStencilStates.Default': depth read and write with a less-than comparison</source>
<target xml:lang="pt">@'Stride.Graphics.DepthStencilStates.Default': depth read and write with a less-than comparison</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.DepthStencilStates.DefaultInverse': read and write with a greater-or-equals comparison</source>
<target xml:lang="pt">@'Stride.Graphics.DepthStencilStates.DefaultInverse': read and write with a greater-or-equals comparison</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.DepthStencilStates.DepthRead': read only with a less-than comparison</source>
<target xml:lang="pt">@'Stride.Graphics.DepthStencilStates.DepthRead': read only with a less-than comparison</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.DepthStencilStates.None': neither read nor write</source>
<target xml:lang="pt">@'Stride.Graphics.DepthStencilStates.None': neither read nor write</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Setting the depth state</source>
<target xml:lang="pt"><g id="1">Code:</g> Setting the depth state</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en">pipelineStateDescription.DepthStencilState = DepthStencilStates.Default;
pipelineStateDescription.DepthStencilState = DepthStencilStates.DefaultInverse;
pipelineStateDescription.DepthStencilState = DepthStencilStates.DepthRead;
pipelineStateDescription.DepthStencilState = DepthStencilStates.None;
</source>
<target xml:lang="pt">pipelineStateDescription.DepthStencilState = DepthStencilStates.Default;
pipelineStateDescription.DepthStencilState = DepthStencilStates.DefaultInverse;
pipelineStateDescription.DepthStencilState = DepthStencilStates.DepthRead;
pipelineStateDescription.DepthStencilState = DepthStencilStates.None;
</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">You can also set custom depth and stencil states. For the  list of options and default values, see the @'Stride.Graphics.DepthStencilStateDescription' API documentation.</source>
<target xml:lang="pt">You can also set custom depth and stencil states. For the  list of options and default values, see the @'Stride.Graphics.DepthStencilStateDescription' API documentation.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Custom depth and stencil state</source>
<target xml:lang="pt"><g id="1">Code:</g> Custom depth and stencil state</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">// depth test is enabled but it doesn't write
var depthStencilStateDescription = new DepthStencilStateDescription(true, false);
pipelineStateDescription.DepthStencilState = depthStencilStateDescription;
</source>
<target xml:lang="pt">// depth test is enabled but it doesn't write
var depthStencilStateDescription = new DepthStencilStateDescription(true, false);
pipelineStateDescription.DepthStencilState = depthStencilStateDescription;
</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">The stencil reference isn't part of the @'Stride.Graphics.PipelineState'. It's set using @'Stride.Graphics.CommandList.SetStencilReference(System.Int32)'.</source>
<target xml:lang="pt">The stencil reference isn't part of the @'Stride.Graphics.PipelineState'. It's set using @'Stride.Graphics.CommandList.SetStencilReference(System.Int32)'.</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Set the stencil reference</source>
<target xml:lang="pt"><g id="1">Code:</g> Set the stencil reference</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">CommandList.SetStencilReference(2);
</source>
<target xml:lang="pt">CommandList.SetStencilReference(2);
</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">Blend state</source>
<target xml:lang="pt">Blend state</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">The @'Stride.Graphics.PipelineStateDescription.BlendState' and @'Stride.Graphics.PipelineStateDescription.SampleMask' properties control blending. The @'Stride.Graphics.BlendStates' class defines a set of commonly used blend states:</source>
<target xml:lang="pt">The @'Stride.Graphics.PipelineStateDescription.BlendState' and @'Stride.Graphics.PipelineStateDescription.SampleMask' properties control blending. The @'Stride.Graphics.BlendStates' class defines a set of commonly used blend states:</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.BlendStates.Additive': sums the colors</source>
<target xml:lang="pt">@'Stride.Graphics.BlendStates.Additive': sums the colors</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.BlendStates.AlphaBlend': sums the colors using the alpha of the source on the destination color</source>
<target xml:lang="pt">@'Stride.Graphics.BlendStates.AlphaBlend': sums the colors using the alpha of the source on the destination color</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.BlendStates.NonPremultiplied': sums using the alpha of the source on both colors</source>
<target xml:lang="pt">@'Stride.Graphics.BlendStates.NonPremultiplied': sums using the alpha of the source on both colors</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en">@'Stride.Graphics.BlendStates.Opaque': replaces the color</source>
<target xml:lang="pt">@'Stride.Graphics.BlendStates.Opaque': replaces the color</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Set the blend state</source>
<target xml:lang="pt"><g id="1">Code:</g> Set the blend state</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">// Set common blend states
pipelineStateDescription.BlendState = BlendStates.Additive;
pipelineStateDescription.BlendState = BlendStates.AlphaBlend;
pipelineStateDescription.BlendState = BlendStates.NonPremultiplied;
pipelineStateDescription.BlendState = BlendStates.Opaque;

// Set the sample mask
pipelineStateDescription.SampleMask = 0xFFFFFFFF;
</source>
<target xml:lang="pt">// Set common blend states
pipelineStateDescription.BlendState = BlendStates.Additive;
pipelineStateDescription.BlendState = BlendStates.AlphaBlend;
pipelineStateDescription.BlendState = BlendStates.NonPremultiplied;
pipelineStateDescription.BlendState = BlendStates.Opaque;

// Set the sample mask
pipelineStateDescription.SampleMask = 0xFFFFFFFF;
</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">You can set custom depth and blend states. For a list of options and default values, see the @'Stride.Graphics.BlendStateDescription' API documentation.</source>
<target xml:lang="pt">You can set custom depth and blend states. For a list of options and default values, see the @'Stride.Graphics.BlendStateDescription' API documentation.</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Custom blend state</source>
<target xml:lang="pt"><g id="1">Code:</g> Custom blend state</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">// create the object describing the blend state per target
var blendStateRenderTargetDescription = new BlendStateRenderTargetDescription();
blendStateRenderTargetDescription.BlendEnable = true;
blendStateRenderTargetDescription.ColorSourceBlend = Blend.SourceColor;
// etc.

// create the blendStateDescription object
var blendStateDescription = new BlendStateDescription(Blend.SourceColor, Blend.InverseSourceColor);
blendStateDescription.AlphaToCoverageEnable = true; // enable alpha to coverage
blendStateDescription.RenderTargets[0] = blendStateRenderTargetDescription;
pipelineStateDescription.BlendState = blendStateDescription;
</source>
<target xml:lang="pt">// create the object describing the blend state per target
var blendStateRenderTargetDescription = new BlendStateRenderTargetDescription();
blendStateRenderTargetDescription.BlendEnable = true;
blendStateRenderTargetDescription.ColorSourceBlend = Blend.SourceColor;
// etc.

// create the blendStateDescription object
var blendStateDescription = new BlendStateDescription(Blend.SourceColor, Blend.InverseSourceColor);
blendStateDescription.AlphaToCoverageEnable = true; // enable alpha to coverage
blendStateDescription.RenderTargets[0] = blendStateRenderTargetDescription;
pipelineStateDescription.BlendState = blendStateDescription;
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">The blend factor isn't part of the @'Stride.Graphics.PipelineState'. It's set using @'Stride.Graphics.CommandList.SetBlendFactor(Stride.Core.Mathematics.Color4)'.</source>
<target xml:lang="pt">The blend factor isn't part of the @'Stride.Graphics.PipelineState'. It's set using @'Stride.Graphics.CommandList.SetBlendFactor(Stride.Core.Mathematics.Color4)'.</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Set the blend factor</source>
<target xml:lang="pt"><g id="1">Code:</g> Set the blend factor</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">CommandList.SetBlendFactor(Color4.White);
</source>
<target xml:lang="pt">CommandList.SetBlendFactor(Color4.White);
</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">Effects</source>
<target xml:lang="pt">Effects</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en">The pipeline state also includes the shaders you want to use for drawing.
To bind an @'Stride.Graphics.Effect' to the pipeline, set the @'Stride.Graphics.PipelineStateDescription.EffectBytecode'
and @'Stride.Graphics.PipelineStateDescription.RootSignature' properties of the @'Stride.Graphics.PipelineStateDescription' to the matching values of the effect.</source>
<target xml:lang="pt">The pipeline state also includes the shaders you want to use for drawing.
To bind an @'Stride.Graphics.Effect' to the pipeline, set the @'Stride.Graphics.PipelineStateDescription.EffectBytecode'
and @'Stride.Graphics.PipelineStateDescription.RootSignature' properties of the @'Stride.Graphics.PipelineStateDescription' to the matching values of the effect.</target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en">An @'Stride.Shaders.EffectBytecode' contains the actual shader programs. For more information, see <g id="1">Effects and Shaders</g>.</source>
<target xml:lang="pt">An @'Stride.Shaders.EffectBytecode' contains the actual shader programs. For more information, see <g id="1">Effects and Shaders</g>.</target>
</trans-unit>
<trans-unit id="tu56" xml:space="preserve">
<source xml:lang="en">The @'Stride.Graphics.RootSignature' describes the number and kind of resources expected by the effect. The next chapter covers how to <g id="1">bind resources</g> to the pipeline.</source>
<target xml:lang="pt">The @'Stride.Graphics.RootSignature' describes the number and kind of resources expected by the effect. The next chapter covers how to <g id="1">bind resources</g> to the pipeline.</target>
</trans-unit>
<trans-unit id="tu57" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Bind an effect</source>
<target xml:lang="pt"><g id="1">Code:</g> Bind an effect</target>
</trans-unit>
<trans-unit id="tu58" xml:space="preserve">
<source xml:lang="en">var effectInstance = new EffectInstance(EffectSystem.LoadEffect("MyEffect").WaitForResult());
pipelineStateDescription.EffectBytecode = effectInstance.Effect.Bytecode;
pipelineStateDescription.RootSignature = effectInstance.RootSignature;
</source>
<target xml:lang="pt">var effectInstance = new EffectInstance(EffectSystem.LoadEffect("MyEffect").WaitForResult());
pipelineStateDescription.EffectBytecode = effectInstance.Effect.Bytecode;
pipelineStateDescription.RootSignature = effectInstance.RootSignature;
</target>
</trans-unit>
<trans-unit id="tu59" xml:space="preserve">
<source xml:lang="en">Input layout</source>
<target xml:lang="pt">Input layout</target>
</trans-unit>
<trans-unit id="tu60" xml:space="preserve">
<source xml:lang="en">The pipeline state describes the layout in which vertices are sent to the device through the @'Stride.Graphics.PipelineStateDescription.InputElements' and @'Stride.Graphics.PipelineStateDescription.PrimitiveType' properties.</source>
<target xml:lang="pt">The pipeline state describes the layout in which vertices are sent to the device through the @'Stride.Graphics.PipelineStateDescription.InputElements' and @'Stride.Graphics.PipelineStateDescription.PrimitiveType' properties.</target>
</trans-unit>
<trans-unit id="tu61" xml:space="preserve">
<source xml:lang="en">The <g id="1">Draw vertices</g> page describes how to create custom vertex buffers and their @'Stride.Graphics.VertexDeclaration' in more detail.</source>
<target xml:lang="pt">The <g id="1">Draw vertices</g> page describes how to create custom vertex buffers and their @'Stride.Graphics.VertexDeclaration' in more detail.</target>
</trans-unit>
<trans-unit id="tu62" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Set an input layout</source>
<target xml:lang="pt"><g id="1">Code:</g> Set an input layout</target>
</trans-unit>
<trans-unit id="tu63" xml:space="preserve">
<source xml:lang="en">VertexDeclaration vertexDeclaration = ...
pipelineStateDescription.InputElements = vertexDeclaration.CreateInputElements();
pipelineStateDescription.PrimitiveType = PrimitiveType.TriangleStrip;
</source>
<target xml:lang="pt">VertexDeclaration vertexDeclaration = ...
pipelineStateDescription.InputElements = vertexDeclaration.CreateInputElements();
pipelineStateDescription.PrimitiveType = PrimitiveType.TriangleStrip;
</target>
</trans-unit>
<trans-unit id="tu64" xml:space="preserve">
<source xml:lang="en">Output description</source>
<target xml:lang="pt">Output description</target>
</trans-unit>
<trans-unit id="tu65" xml:space="preserve">
<source xml:lang="en">The @'Stride.Graphics.PipelineStateDescription.Output' property of the @'Stride.Graphics.PipelineStateDescription' defines the number and @'Stride.Graphics.PixelFormat' of all bound render textures.</source>
<target xml:lang="pt">The @'Stride.Graphics.PipelineStateDescription.Output' property of the @'Stride.Graphics.PipelineStateDescription' defines the number and @'Stride.Graphics.PixelFormat' of all bound render textures.</target>
</trans-unit>
<trans-unit id="tu66" xml:space="preserve">
<source xml:lang="en">For information on how to bind render textures to the pipeline, see <g id="1">Textures and render textures</g>.</source>
<target xml:lang="pt">For information on how to bind render textures to the pipeline, see <g id="1">Textures and render textures</g>.</target>
</trans-unit>
<trans-unit id="tu67" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Create an output description</source>
<target xml:lang="pt"><g id="1">Code:</g> Create an output description</target>
</trans-unit>
<trans-unit id="tu68" xml:space="preserve">
<source xml:lang="en">var renderOutputDescription = new RenderOutputDescription(GraphicsDevice.Presenter.BackBuffer.Format, GraphicsDevice.Presenter.DepthStencilBuffer.Format);
pipelineStateDescription.Output = renderOutputDescription;
</source>
<target xml:lang="pt">var renderOutputDescription = new RenderOutputDescription(GraphicsDevice.Presenter.BackBuffer.Format, GraphicsDevice.Presenter.DepthStencilBuffer.Format);
pipelineStateDescription.Output = renderOutputDescription;
</target>
</trans-unit>
<trans-unit id="tu69" xml:space="preserve">
<source xml:lang="en">You can use the @'Stride.Graphics.RenderOutputDescription.CaptureState(Stride.Graphics.CommandList)' to retrieve the output description last set on a @'Stride.Graphics.CommandList'. This is especially useful in combination with @'Stride.Graphics.MutablePipelineState', when the render target might not be known up front.</source>
<target xml:lang="pt">You can use the @'Stride.Graphics.RenderOutputDescription.CaptureState(Stride.Graphics.CommandList)' to retrieve the output description last set on a @'Stride.Graphics.CommandList'. This is especially useful in combination with @'Stride.Graphics.MutablePipelineState', when the render target might not be known up front.</target>
</trans-unit>
<trans-unit id="tu70" xml:space="preserve">
<source xml:lang="en"><g id="1">Code:</g> Capture output description</source>
<target xml:lang="pt"><g id="1">Code:</g> Capture output description</target>
</trans-unit>
<trans-unit id="tu71" xml:space="preserve">
<source xml:lang="en">mutablePipelineState.State.Output.CaptureState(CommandList);
mutablePipelineState.Update();
</source>
<target xml:lang="pt">mutablePipelineState.State.Output.CaptureState(CommandList);
mutablePipelineState.Update();
</target>
</trans-unit>
</body>
</file>
</xliff>