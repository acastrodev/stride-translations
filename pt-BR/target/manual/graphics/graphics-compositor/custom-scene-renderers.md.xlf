<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/graphics/graphics-compositor/custom-scene-renderers.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Custom scene renderers</source>
<target xml:lang="pt">Custom scene renderers</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">To create a custom renderer, directly implement the @'Stride.Rendering.Compositing.ISceneRenderer' or use a delegate through the @'Stride.Rendering.Compositing.DelegateSceneRenderer'.</source>
<target xml:lang="pt">To create a custom renderer, directly implement the @'Stride.Rendering.Compositing.ISceneRenderer' or use a delegate through the @'Stride.Rendering.Compositing.DelegateSceneRenderer'.</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">Implement an ISceneRenderer</source>
<target xml:lang="pt">Implement an ISceneRenderer</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">The @'Stride.Rendering.Compositing.SceneRendererBase' provides a default implementation of @'Stride.Rendering.Compositing.ISceneRenderer'. It automatically binds the output defines on the renderer to the GraphicsDevice before calling the <g id="1">DrawCore</g> method.</source>
<target xml:lang="pt">The @'Stride.Rendering.Compositing.SceneRendererBase' provides a default implementation of @'Stride.Rendering.Compositing.ISceneRenderer'. It automatically binds the output defines on the renderer to the GraphicsDevice before calling the <g id="1">DrawCore</g> method.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">[DataContract("MyCustomRenderer")]
[Display("My Custom Renderer")]
public sealed class MyCustomRenderer : SceneRendererBase
{
    // Implements the DrawCore method
    protected override void DrawCore(RenderContext context, RenderDrawContext drawContext)
    {
        // Access to the graphics device
        var graphicsDevice = drawContext.GraphicsDevice;
        var commandList = drawContext.CommandList;
        // Clears the current render target
        commandList.Clear(commandList.RenderTargets[0], Color.CornflowerBlue);
        // [...] 
    }
}
</source>
<target xml:lang="pt">[DataContract("MyCustomRenderer")]
[Display("My Custom Renderer")]
public sealed class MyCustomRenderer : SceneRendererBase
{
    // Implements the DrawCore method
    protected override void DrawCore(RenderContext context, RenderDrawContext drawContext)
    {
        // Access to the graphics device
        var graphicsDevice = drawContext.GraphicsDevice;
        var commandList = drawContext.CommandList;
        // Clears the current render target
        commandList.Clear(commandList.RenderTargets[0], Color.CornflowerBlue);
        // [...] 
    }
}
</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">Use a delegate</source>
<target xml:lang="pt">Use a delegate</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">To develop a renderer and attach it to a method directly, use @'Stride.Rendering.Compositing.DelegateSceneRenderer':</source>
<target xml:lang="pt">To develop a renderer and attach it to a method directly, use @'Stride.Rendering.Compositing.DelegateSceneRenderer':</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">var sceneRenderer = new DelegateSceneRenderer(
    (drawContext) =&gt;
    {
        // Access to the graphics device
        var graphicsDevice = drawContext.GraphicsDevice;
        var commandList = drawContext.CommandList;
        // Clears the current render target
        commandList.Clear(commandList.RenderTargets[0], Color.CornflowerBlue);
        // [...] 
   });
</source>
<target xml:lang="pt">var sceneRenderer = new DelegateSceneRenderer(
    (drawContext) =&gt;
    {
        // Access to the graphics device
        var graphicsDevice = drawContext.GraphicsDevice;
        var commandList = drawContext.CommandList;
        // Clears the current render target
        commandList.Clear(commandList.RenderTargets[0], Color.CornflowerBlue);
        // [...] 
   });
</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><g id="1">Scene renderers</g></source>
<target xml:lang="pt"><g id="1">Scene renderers</g></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en"><g id="1">Debug renderers</g></source>
<target xml:lang="pt"><g id="1">Debug renderers</g></target>
</trans-unit>
</body>
</file>
</xliff>