<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/stride-docs/en/manual/ui/ui-libraries.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">UI libraries</source>
<target xml:lang="pt">UI libraries</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Designer<x id="6"/></source>
<target xml:lang="pt"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Designer<x id="6"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en"><g id="1">UI libraries</g> contain <g id="2">UI elements</g> such as grids, buttons, sliders and so on that you can use and re-use in your <g id="3">UI pages</g>.</source>
<target xml:lang="pt"><g id="1">UI libraries</g> contain <g id="2">UI elements</g> such as grids, buttons, sliders and so on that you can use and re-use in your <g id="3">UI pages</g>.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">Stride projects include a <g id="1">standard library</g> of UI elements. You can create your own libraries of custom elements too.</source>
<target xml:lang="pt">Stride projects include a <g id="1">standard library</g> of UI elements. You can create your own libraries of custom elements too.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en"><x id="1"/>UI library<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>UI library<x id="2"/></target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">UI libraries are similar to <g id="1">prefabs</g> in the Scene Editor; you can create your own elements, save them in a custom UI library, and then use them wherever you need across multiple UI pages. You can also nest libraries inside other libraries, just like <g id="2">nested prefabs</g>.</source>
<target xml:lang="pt">UI libraries are similar to <g id="1">prefabs</g> in the Scene Editor; you can create your own elements, save them in a custom UI library, and then use them wherever you need across multiple UI pages. You can also nest libraries inside other libraries, just like <g id="2">nested prefabs</g>.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">At runtime, you can re-instantiate UI library roots and insert them into an existing UI tree.</source>
<target xml:lang="pt">At runtime, you can re-instantiate UI library roots and insert them into an existing UI tree.</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Create a UI library</source>
<target xml:lang="pt">Create a UI library</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">In the <g id="1">Asset View</g>, click <g id="2">Add asset &gt; UI &gt; UI library</g>.</source>
<target xml:lang="pt">In the <g id="1">Asset View</g>, click <g id="2">Add asset &gt; UI &gt; UI library</g>.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Add UI library<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Add UI library<x id="2"/></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Game Studio adds the UI library to the <g id="1">Asset View</g>.</source>
<target xml:lang="pt">Game Studio adds the UI library to the <g id="1">Asset View</g>.</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Added UI library<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Added UI library<x id="2"/></target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">Alternatively, to create a UI library from an existing UI element:</source>
<target xml:lang="pt">Alternatively, to create a UI library from an existing UI element:</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">Select the elements you want to create a UI library from.</source>
<target xml:lang="pt">Select the elements you want to create a UI library from.</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en">Right-click and select <g id="1">Create library from selection</g>.</source>
<target xml:lang="pt">Right-click and select <g id="1">Create library from selection</g>.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Added UI library<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Added UI library<x id="2"/></target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Game Studio creates a library with a copy of the elements you selected.</source>
<target xml:lang="pt">Game Studio creates a library with a copy of the elements you selected.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">Assign a UI library in code</source>
<target xml:lang="pt">Assign a UI library in code</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en">// This property can be assigned from a UI library asset in Game Studio
public UILibrary MyLibrary { get; set; }

public Button CreateButton()
{
    // assuming there is a root element named "MyButton" of type (or derived from) Button
    var button = MyLibrary.InstantiateElement&lt;Button&gt;("MyButton");

    // if there is no root named "MyButton" in the library or the type does not match,
    // the previous method will return null
    if (button != null)
    {        
        // attach a delegate to the Click event
        someButton.Click += delegate
        {
            // do something here...
        };
    }

    return button;
}
</source>
<target xml:lang="pt">// This property can be assigned from a UI library asset in Game Studio
public UILibrary MyLibrary { get; set; }

public Button CreateButton()
{
    // assuming there is a root element named "MyButton" of type (or derived from) Button
    var button = MyLibrary.InstantiateElement&lt;Button&gt;("MyButton");

    // if there is no root named "MyButton" in the library or the type does not match,
    // the previous method will return null
    if (button != null)
    {        
        // attach a delegate to the Click event
        someButton.Click += delegate
        {
            // do something here...
        };
    }

    return button;
}
</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">UI pages have only one root element. UI libraries can have multiple root elements.</source>
<target xml:lang="pt">UI pages have only one root element. UI libraries can have multiple root elements.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en"><g id="1">UI pages</g></source>
<target xml:lang="pt"><g id="1">UI pages</g></target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en"><g id="1">UI editor</g></source>
<target xml:lang="pt"><g id="1">UI editor</g></target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en"><g id="1">Add a UI to a scene</g></source>
<target xml:lang="pt"><g id="1">Add a UI to a scene</g></target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en"><g id="1">Layout system</g></source>
<target xml:lang="pt"><g id="1">Layout system</g></target>
</trans-unit>
</body>
</file>
</xliff>