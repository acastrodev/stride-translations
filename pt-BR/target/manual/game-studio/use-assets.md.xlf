<?xml version="1.0" encoding="UTF-8" standalone="no"?><xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" xmlns:okp="okapi-framework:xliff-extensions" its:version="2.0" version="1.2">
<file datatype="x-text/x-markdown" okp:inputEncoding="UTF-8" original="/D:/repos/rr/source/manual/game-studio/use-assets.md" source-language="en" target-language="pt">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Use assets</source>
<target xml:lang="pt">Utilizar activos</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Introdução<x id="2"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">There are four ways to use assets:</source>
<target xml:lang="pt">Existem quatro maneiras de usar ativos:</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">reference them in entity components</source>
<target xml:lang="pt">referenciá-los em componentes da entidade</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">reference them in other assets</source>
<target xml:lang="pt">referenciá-los em outros ativos</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">load them from code as content</source>
<target xml:lang="pt">carregá-los do código como conteúdo</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">load them from code as content using <g id="1">UrlReference</g></source>
<target xml:lang="pt">carregá-los do código como conteúdo usando <g id="1">UrlReference</g></target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">Reference assets in components</source>
<target xml:lang="pt">Activos de referência em componentes</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Many kinds of component use assets. For example, model components use model assets.</source>
<target xml:lang="pt">Muitos tipos de ativos de uso de componentes. Por exemplo, os componentes do modelo usam ativos do modelo.</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Components that use assets have <g id="1">asset docks</g> in the <g id="2">property grid</g>.</source>
<target xml:lang="pt">Componentes que usam ativos têm <g id="1">asset docks</g> no <g id="2">property grid</g>.</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Select an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/> Selecione um ativo<x id="2"/></target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">To add an asset to an entity component, drag the asset to the asset dock in the component properties (in the <g id="1">property grid</g>). You can drop assets in the text field or the empty thumbnail.</source>
<target xml:lang="pt">Para adicionar um ativo a um componente de entidade, arraste o ativo para a doca de ativos nas propriedades do componente (na grade <g id="1">property</g>). Você pode soltar ativos no campo de texto ou na miniatura vazia.</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Drag and drop an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Drag e drop a asset<x id="2"/></target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">Alternatively, click <x id="1"/>Hand icon<x id="2"/> (<g id="3">Select an asset</g>).</source>
<target xml:lang="pt">Em alternativa, clique em <x id="1"/>Hand icon<x id="2"/> (<g id="3">Select an asset</g>).</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Select an asset<x id="2"/></source>
<target xml:lang="pt"><x id="1"/> Selecione um ativo<x id="2"/></target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">The <g id="1">Select an asset</g> window opens.</source>
<target xml:lang="pt">A janela <g id="1">Selecione um ativo</g> abre.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!NOTE<x id="2"/>
The <g id="3">Select an asset</g> window only displays assets of types expected by the component. For example, if the component is an audio listener, the window only displays audio assets.</source>
<target xml:lang="pt"><x id="1"/>!NOTE<x id="2"/>
A janela <g id="3">Selecione um ativo</g> só exibe ativos de tipos esperados pelo componente. Por exemplo, se o componente é um receptor de áudio, a janela só exibe ativos de áudio.</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">After you add an asset to a component, the asset dock displays its name and a thumbnail image.</source>
<target xml:lang="pt">Depois de adicionar um ativo a um componente, a doca de ativos exibe seu nome e uma imagem de miniatura.</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Asset displayed<x id="2"/></source>
<target xml:lang="pt"><x id="1"/> Aset exibido<x id="2"/></target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">Reference assets in other assets</source>
<target xml:lang="pt">Activos de referência em outros activos</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">Assets can reference other assets. For example, a model asset might use material assets.</source>
<target xml:lang="pt">Os ativos podem referenciar outros ativos. Por exemplo, um ativo modelo pode usar ativos materiais.</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en">You can add asset references to assets the same way you add them to entity components (see above).</source>
<target xml:lang="pt">Você pode adicionar referências de ativos da mesma forma que você os adiciona aos componentes da entidade (veja acima).</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">Clear a reference</source>
<target xml:lang="pt">Limpar uma referência</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">To clear a reference to an asset, in the <g id="1">asset dock</g>, click <x id="2"/>eraser<x id="3"/> (<g id="4">Clear reference</g>).</source>
<target xml:lang="pt">Para limpar uma referência a um ativo, no <g id="1">asset dock</g>, clique em <x id="2"/>eraser<x id="3"/> (<g id="4">Clear reference</g>).</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Use eraser<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Usar eraser<x id="2"/></target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">Examine references</source>
<target xml:lang="pt">Referências examinadas</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en">You can see the references in a selected asset in the <g id="1">References</g> tab. By default, this is in the bottom right of Game Studio.</source>
<target xml:lang="pt">Você pode ver as referências em um ativo selecionado na aba <g id="1">References</g>. Por padrão, isso está na parte inferior direita do Game Studio.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en"><x id="1"/>References tab<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Referências tab<x id="2"/></target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en">The <g id="1">References</g> tab displays the assets referenced by the selected asset.</source>
<target xml:lang="pt">A aba <g id="1">References</g> exibe os ativos referenciados pelo ativo selecionado.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en">The <g id="1">Referenced by</g> tab displays the assets that reference the selected asset.</source>
<target xml:lang="pt">A aba <g id="1">Referenced by</g> exibe os ativos que referem o ativo selecionado.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Tip<x id="2"/>
If you can't see the References tab, make sure it's displayed under <g id="3">View &gt; References</g>.</source>
<target xml:lang="pt"><x id="1"/>!Tip<x id="2"/>
Se você não consegue ver a guia Referências, certifique-se de que ela é exibida em <g id="3">View &gt; Referências</g>.</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en">Load assets from code</source>
<target xml:lang="pt">Carga de ativos de código</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">When loading in assets at runtime we speak of "Content" rather than assets. The loaded content refers to the asset and can then be used in your script.</source>
<target xml:lang="pt">Ao carregar em ativos no tempo de execução, falamos de "Conteúdo" em vez de ativos. O conteúdo carregado refere-se ao ativo e pode ser usado em seu script.</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">// Load a model (replace URL with valid URL)
var model = Content.Load&lt;Model&gt;("AssetFolder/MyModel");

// Create a new entity to add to the scene
Entity entity = new Entity(position, "Entity Added by Script") { new ModelComponent { Model = model } };

// Add a new entity to the scene
SceneSystem.SceneInstance.RootScene.Entities.Add(entity);
</source>
<target xml:lang="pt">// Carregar um modelo (substituir URL com URL válida)
var model = Content.Load&lt;Model&gt;("AssetFolder/MyModel");

// Criar uma nova entidade para adicionar à cena
Entidade entidade = nova Entidade (posição, "Entidade Adicionado por Script") { new ModelComponent { Model = model } };

// Adicionar uma nova entidade à cena
SceneSystem.SceneInstance.RootScene.Entities.Add (entidade);
</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!TIP<x id="2"/>
To find the asset URL, in Game Studio, move the mouse over the asset. Game Studio displays the asset URL in a tooltip.  URLs typically have the format <g id="3">AssetFolder/AssetName</g>.
<x id="4"/>!WARNING<x id="5"/>
When loading assets from scripts, make sure you:</source>
<target xml:lang="pt"><x id="1"/>!TIP<x id="2"/>
Para encontrar a URL de ativos, no Game Studio, mova o mouse sobre o ativo. Game Studio exibe a URL de ativos em uma ponta de ferramenta.  URLs normalmente têm o formato <g id="3"> AssetFolder/AssetName</g>.
<x id="4"/><x id="5"/>
Ao carregar ativos de scripts, certifique-se de:</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">include the asset in the build as described in <g id="1">Manage assets</g></source>
<target xml:lang="pt">incluir o ativo na compilação como descrito em <g id="1">Gerenciar ativos</g></target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">make sure you add the script as a component to an entity in the scene</source>
<target xml:lang="pt">certifique-se de adicionar o script como um componente a uma entidade na cena</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">Unload unneeded assets</source>
<target xml:lang="pt">Descarga de ativos desnecessários</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">When loading content from code, you should unload content when you don't need them any more. If you don't, content stays in memory, wasting GPU.</source>
<target xml:lang="pt">Ao carregar conteúdo do código, você deve descarregar o conteúdo quando você não precisa mais deles. Se você não o fizer, o conteúdo fica na memória, desperdiçando GPU.</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">To do unload an asset, use <g id="1">Content.Unload(myAsset)</g>.</source>
<target xml:lang="pt">Para descarregar um ativo, use <g id="1">Content.Unload(myAsset)</g>.</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">Load assets from code using UrlReference</source>
<target xml:lang="pt">Carga de ativos de código usando UrlReference</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference</g> allows you to reference assets in your scripts the same way you would with normal assets but they are loaded dynamically in code. Referencing an asset with a <g id="2">UrlReference</g> causes the asset to be included in the build.</source>
<target xml:lang="pt"><g id="1">UrlReference</g> permite que você referencie ativos em seus scripts da mesma maneira que você faria com ativos normais, mas eles são carregados dinamicamente no código. A referência a um ativo com um <g id="2">UrlReference</g> faz com que o ativo seja incluído na compilação.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">You can reference assets in your scripts using properties/fields of type <g id="1">UrlReference</g> or <g id="2">UrlReference&lt;T&gt;</g>:</source>
<target xml:lang="pt">Você pode referenciar ativos em seus scripts usando propriedades/campos do tipo <g id="1">UrlReference</g> ou <g id="2">UrlReference&lt;T&gt;</g>:</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference</g> can be used to reference any asset. This is most useful for the "Raw asset".</source>
<target xml:lang="pt"><g id="1">UrlReference</g> pode ser usado para referenciar qualquer ativo. Isso é mais útil para o "Ativo Raw".</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en"><g id="1">UrlReference&lt;T&gt;</g> can be used to specify the desired type. i.e. <g id="2">UrlReference&lt;Scene&gt;</g>. This gives Game Studio a hint about what type of asset this <g id="3">UrlReference</g> can be used for.</source>
<target xml:lang="pt"><g id="1">UrlReference&lt;T&gt;</g> pode ser usado para especificar o tipo desejado. i.e. <g id="2">UrlReference&lt;Scene&gt;</g>. Isso dá ao Game Studio uma dica sobre que tipo de ativo este <g id="3">UrlReference</g> pode ser usado para.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">Examples</source>
<target xml:lang="pt">Exemplos</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en">Loading a Scene</source>
<target xml:lang="pt">Carregando uma cena</target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en">Using <g id="1">UrlReference&lt;Scene&gt;</g> to load the next scene.</source>
<target xml:lang="pt">Usando <g id="1">UrlReference&lt;Scene&gt;</g> para carregar a próxima cena.</target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en">using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference&lt;Scene&gt; NextSceneUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task LoadNextScene()
        {
            //Dynamically load next scene asynchronously
            var nextScene = await Content.LoadAsync(NextSceneUrl);
            SceneSystem.SceneInstance.RootScene = nextScene;
        }
    }
}
</source>
<target xml:lang="pt">usando o Sistema. Threading. Tarefas;
//Incluir o Stride. Core.Serialization namespace para usar UrlReference
usando Stride. Core.Serialização;
usando Stride. Motor;

exemplos de namespace
(
    classe pública UrlReference Exemplo : AsyncScript
    (
        público UrlReference&lt;Scene&gt; NextScene Url { get; set; }

        override público async Task Execute()
        (
            //...
        }

        async privado Task LoadNextScene()
        (
            // Carga dinamicamente próxima cena assíncrona
            var nextScene = await Content.LoadAsync (NextSceneUrl);
            SceneSystem.SceneInstance.RootScene = nextScene;
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu50" xml:space="preserve">
<source xml:lang="en">Load data from a Raw asset JSON file</source>
<target xml:lang="pt">Carregar dados de um arquivo JSON de ativos crus</target>
</trans-unit>
<trans-unit id="tu51" xml:space="preserve">
<source xml:lang="en">Use a Raw asset to store data in a JSON file and load using <g id="1">Newtonsoft.Json</g>. To use <g id="2">Newtonsoft.Json</g> you also need to add the <g id="3">Newtonsoft.Json</g> NuGet package to the project.</source>
<target xml:lang="pt">Use um ativo Raw para armazenar dados em um arquivo JSON e carregar usando <g id="1">Newtonsoft. Json</g>. Para usar <g id="2">Newtonsoft.Json</g> você também precisa adicionar o <g id="3">Newtonsoft.Json</g> NuGet pacote para o projeto.</target>
</trans-unit>
<trans-unit id="tu52" xml:space="preserve">
<source xml:lang="en">//Include the Newtonsoft.Json namespace.
using Newtonsoft.Json;
using System.IO;
using System.Threading.Tasks;
//Include the Stride.Core.Serialization namespace to use UrlReference
using Stride.Core.Serialization;
using Stride.Engine;

namespace Examples
{
    public class UrlReferenceExample : AsyncScript
    {
        public UrlReference RawAssetUrl { get; set; }

        public override async Task Execute()
        {
            //...
        }

        private async Task&lt;MyDataClass&gt; LoadMyData()
        {
            //Open a StreamReader to read the content
            using (var stream = Content.OpenAsStream(RawAssetUrl))
            using (var streamReader = new StreamReader(stream))
            {
                //read the raw asset content
                string json = await streamReader.ReadToEndAsync();
                //Deserialize the JSON to your custom MyDataClass Type.
                return JsonConvert.DeserializeObject&lt;MyDataClass&gt;(json);
            }
        }
    }
}
</source>
<target xml:lang="pt">//Incluir o Newtonsoft. Espaço de nomes Json.
usando Newtonsoft. Json;
usando o Sistema. IO;
usando o Sistema. Threading. Tarefas;
//Incluir o Stride. Core.Serialization namespace para usar UrlReference
usando Stride. Core.Serialização;
usando Stride. Motor;

exemplos de namespace
(
    classe pública UrlReference Exemplo : AsyncScript
    (
        ulReference RawAset Url { get; set; }

        override público async Task Execute()
        (
            //...
        }

        async privado Task&lt;MyDataClass&gt; LoadMyData()
        (
            //Abra um StreamReader para ler o conteúdo
            using (var stream = Content.OpenAsStream (RawAssetUrl))
            usando (varRead streamer = novo StreamReader (stream)
            (
                //leia o conteúdo de ativos crus
                string json = await streamReader.ReadToEndAsync();
                //Deserialize o JSON para o seu tipo personalizado MyDataClass.
                retorno JsonConvert.DeserializeObject&lt;MyDataClass&gt;(json);
            }
        }
    }
}
</target>
</trans-unit>
<trans-unit id="tu53" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">Ver também</target>
</trans-unit>
<trans-unit id="tu54" xml:space="preserve">
<source xml:lang="en"><g id="1">Create assets</g></source>
<target xml:lang="pt"><g id="1">Criar ativos</g></target>
</trans-unit>
<trans-unit id="tu55" xml:space="preserve">
<source xml:lang="en"><g id="1">Manage assets</g></source>
<target xml:lang="pt"><g id="1">Gerenciar ativos</g></target>
</trans-unit>
</body>
</file>
</xliff>