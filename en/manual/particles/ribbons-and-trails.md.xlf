<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/particles/ribbons-and-trails.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Ribbons and trails</source>
<target xml:lang="pt">Ribbons and trails</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Programmer<x id="6"/></source>
<target xml:lang="pt"><x id="1"/>Intermediate<x id="2"/>
<x id="3"/>Artist<x id="4"/>
<x id="5"/>Programmer<x id="6"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">To create <g id="1">ribbons</g> and <g id="2">trails</g>, Stride builds the mesh data as a strip connecting the particles, rather than individual quads. Ribbons and trails are often used to create visual effects such as sword slashes.</source>
<target xml:lang="pt">To create <g id="1">ribbons</g> and <g id="2">trails</g>, Stride builds the mesh data as a strip connecting the particles, rather than individual quads. Ribbons and trails are often used to create visual effects such as sword slashes.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-tutorials-ribbons-0.jpg<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-tutorials-ribbons-0.jpg<x id="2"/></target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">In the diagram below, several particles (represented as red dots) are rendered as individual quads (blue squares):</source>
<target xml:lang="pt">In the diagram below, several particles (represented as red dots) are rendered as individual quads (blue squares):</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: individual quads<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: individual quads<x id="2"/></target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">In the diagram below, a strip is created by connecting the particles and rendering quads between the adjacent particles:</source>
<target xml:lang="pt">In the diagram below, a strip is created by connecting the particles and rendering quads between the adjacent particles:</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: ribbon of particles<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: ribbon of particles<x id="2"/></target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">Ribbons vs trails</source>
<target xml:lang="pt">Ribbons vs trails</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">Both ribbons and trails generate a flat surface which follows an axis connecting adjacent particles in a line. This line defines one of the axes of the surface. The difference is that ribbons always face the camera, and trails don't.</source>
<target xml:lang="pt">Both ribbons and trails generate a flat surface which follows an axis connecting adjacent particles in a line. This line defines one of the axes of the surface. The difference is that ribbons always face the camera, and trails don't.</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">The gif below shows the different behavior of ribbons (red) and trails (yellow) when viewed from different camera angles. Note how the ribbon doesn't change as the camera moves; it's fixed in space.</source>
<target xml:lang="pt">The gif below shows the different behavior of ribbons (red) and trails (yellow) when viewed from different camera angles. Note how the ribbon doesn't change as the camera moves; it's fixed in space.</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Ribbons vs trails<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Ribbons vs trails<x id="2"/></target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en">Sort particles</source>
<target xml:lang="pt">Sort particles</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en">To create ribbons and trails, you usually need to sort the particles into an order. If you don't sort the particles, they connect erratically, as in this diagram:</source>
<target xml:lang="pt">To create ribbons and trails, you usually need to sort the particles into an order. If you don't sort the particles, they connect erratically, as in this diagram:</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: unordered particles/particles-tutorials-ribbons-2.png<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: unordered particles/particles-tutorials-ribbons-2.png<x id="2"/></target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en">Here's an example of how unsorted particles look at runtime:</source>
<target xml:lang="pt">Here's an example of how unsorted particles look at runtime:</target>
</trans-unit>
<group id="sd1_ssf7" resname="sub-filter:sd1">
<trans-unit id="sd1_sf7_tu1" resname="sd1_1" restype="x-paragraph" xml:space="preserve">
<source xml:lang="en">
</source>
<target xml:lang="pt">
</target>
</trans-unit>
</group>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en">Rather than the particles connecting in order, the strip erratically jumps between particles. (This is the same problem alpha-blended quads have when they're not properly sorted.)</source>
<target xml:lang="pt">Rather than the particles connecting in order, the strip erratically jumps between particles. (This is the same problem alpha-blended quads have when they're not properly sorted.)</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en">To sort the particles, under <g id="1">Particle System > Source > Emitters</g>, change the <g id="2">Sorting</g> property.</source>
<target xml:lang="pt">To sort the particles, under <g id="1">Particle System > Source > Emitters</g>, change the <g id="2">Sorting</g> property.</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Sort particles<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Sort particles<x id="2"/></target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en">If your particles have the same <g id="1">lifespan</g> property, and are emitted no more than once per frame (usually the case at 30 particles per second or fewer), you can sort them by age.</source>
<target xml:lang="pt">If your particles have the same <g id="1">lifespan</g> property, and are emitted no more than once per frame (usually the case at 30 particles per second or fewer), you can sort them by age.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en">However, if you spawn several particles per second or your particles vary in lifespan, sorting by age doesn't provide a consistent order, as the sorting parameter changes between frames. In this case, you should sort the particles by order. To do this, you need to add a <g id="1">spawn order initializer</g>. To do this, in the entity properties, under <g id="2">Particle System > Source > Emitters</g>, next to <g id="3">Initializers</g>, click <x id="4"/>Green plus button<x id="5"/> (<g id="6">Add</g>) and select <g id="7">Spawn Order</g>.</source>
<target xml:lang="pt">However, if you spawn several particles per second or your particles vary in lifespan, sorting by age doesn't provide a consistent order, as the sorting parameter changes between frames. In this case, you should sort the particles by order. To do this, you need to add a <g id="1">spawn order initializer</g>. To do this, in the entity properties, under <g id="2">Particle System > Source > Emitters</g>, next to <g id="3">Initializers</g>, click <x id="4"/>Green plus button<x id="5"/> (<g id="6">Add</g>) and select <g id="7">Spawn Order</g>.</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Add spawn-order initializer<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Add spawn-order initializer<x id="2"/></target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">This adds a spawn order initializer to the emitter. It doesn't have any properties, but it gives the particles a SpawnID we can sort them by.</source>
<target xml:lang="pt">This adds a spawn order initializer to the emitter. It doesn't have any properties, but it gives the particles a SpawnID we can sort them by.</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en"><x id="1"/>!Note<x id="2"/>
Sorting by depth might work in niche cases, but this doesn't preserve the order between different frames. We don't recommend it for most situations.</source>
<target xml:lang="pt"><x id="1"/>!Note<x id="2"/>
Sorting by depth might work in niche cases, but this doesn't preserve the order between different frames. We don't recommend it for most situations.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Texture coordinates</source>
<target xml:lang="pt">Texture coordinates</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">Unlike billboards, which are individual quads, ribbons and trails have a single surface across all particles. To define how textures are mapped across the surface, under <g id="1">Particle System > Source > Emitters > Shape</g>, change the <g id="2">UV Coords</g> property.</source>
<target xml:lang="pt">Unlike billboards, which are individual quads, ribbons and trails have a single surface across all particles. To define how textures are mapped across the surface, under <g id="1">Particle System > Source > Emitters > Shape</g>, change the <g id="2">UV Coords</g> property.</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en"><x id="1"/>UV coords property<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>UV coords property<x id="2"/></target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en"><g id="1">AsIs</g>: The texture is mapped per segment, copying the same quad stretched between every two particles. This is sometimes useful with flipbook animations (in the <g id="2">Material</g> settings).</source>
<target xml:lang="pt"><g id="1">AsIs</g>: The texture is mapped per segment, copying the same quad stretched between every two particles. This is sometimes useful with flipbook animations (in the <g id="2">Material</g> settings).</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en"><x id="1"/>As-is texture mapping<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>As-is texture mapping<x id="2"/></target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en"><g id="1">Stretched</g>: The texture is stretched between the first and last particle of the trail or ribbon. The <g id="2">UV Factor</g> defines how many times the texture appears across the entire trail or ribbon (1 = once).</source>
<target xml:lang="pt"><g id="1">Stretched</g>: The texture is stretched between the first and last particle of the trail or ribbon. The <g id="2">UV Factor</g> defines how many times the texture appears across the entire trail or ribbon (1 = once).</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Stretched texture mapping<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Stretched texture mapping<x id="2"/></target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en"><g id="1">DistanceBased</g>: The texture is repeated based on the actual world length of the ribbon or trail rather than the number of particles. The <g id="2">UV Factor</g> defines the distance in <g id="3">world units</g> after which the texture repeats</source>
<target xml:lang="pt"><g id="1">DistanceBased</g>: The texture is repeated based on the actual world length of the ribbon or trail rather than the number of particles. The <g id="2">UV Factor</g> defines the distance in <g id="3">world units</g> after which the texture repeats</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Distance-based texture mapping<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Distance-based texture mapping<x id="2"/></target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">Smooth ribbons and trails</source>
<target xml:lang="pt">Smooth ribbons and trails</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">You can add extra segments between adjacent particles to smooth the lines between particles. To do this, under <g id="1">Particle System > Source > Emitters > Shape</g>, change the <g id="2">Smoothing</g> property.</source>
<target xml:lang="pt">You can add extra segments between adjacent particles to smooth the lines between particles. To do this, under <g id="1">Particle System > Source > Emitters > Shape</g>, change the <g id="2">Smoothing</g> property.</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en"><g id="1">None</g> — No smoothing creates only one segment joining two particles. This creates trails and ribbons with sharp angles.</source>
<target xml:lang="pt"><g id="1">None</g> — No smoothing creates only one segment joining two particles. This creates trails and ribbons with sharp angles.</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: particle smoothing<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: particle smoothing<x id="2"/></target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en"><g id="1">Fast</g> — This uses <g id="2">Catmull-Rom interpolation (Wikipedia)</g> to add extra segments between particles, creating a smoother effect. You can set the number of segments with the <g id="3">Segments</g> property.</source>
<target xml:lang="pt"><g id="1">Fast</g> — This uses <g id="2">Catmull-Rom interpolation (Wikipedia)</g> to add extra segments between particles, creating a smoother effect. You can set the number of segments with the <g id="3">Segments</g> property.</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: particle smoothing<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: particle smoothing<x id="2"/></target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en"><g id="1">Best</g> — This generally creates the smoothest effect, but requires more CPU. It calculates a circumcircle around every three sequential particles along the control axis, then adds extra control points on the circle, keeping the segments in an arc. For the first and the last segment, there is only one arc to be followed, but for mid-sections, two different arcs from two different circles overlap; Stride interpolates the control points from the first arc and the second as the point approaches the second particle. You can set the number of segments between every two particles with the <g id="2">Segments</g> property.</source>
<target xml:lang="pt"><g id="1">Best</g> — This generally creates the smoothest effect, but requires more CPU. It calculates a circumcircle around every three sequential particles along the control axis, then adds extra control points on the circle, keeping the segments in an arc. For the first and the last segment, there is only one arc to be followed, but for mid-sections, two different arcs from two different circles overlap; Stride interpolates the control points from the first arc and the second as the point approaches the second particle. You can set the number of segments between every two particles with the <g id="2">Segments</g> property.</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Diagram: particle smoothing<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Diagram: particle smoothing<x id="2"/></target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">This video shows the difference between the three smoothing methods. Note that the rightmost trail (using the <g id="1">Best</g> method) is slightly more circular, closer to the actual path of the sword swing.</source>
<target xml:lang="pt">This video shows the difference between the three smoothing methods. Note that the rightmost trail (using the <g id="1">Best</g> method) is slightly more circular, closer to the actual path of the sword swing.</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en"><x id="1"/>media/particles-tutorials-ribbons-6.gif<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>media/particles-tutorials-ribbons-6.gif<x id="2"/></target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en">Sample project</source>
<target xml:lang="pt">Sample project</target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en">For an example of a project that uses ribbons and trails, try the <g id="1">Ribbon Particles Sample</g> included with Stride.</source>
<target xml:lang="pt">For an example of a project that uses ribbons and trails, try the <g id="1">Ribbon Particles Sample</g> included with Stride.</target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en"><g id="1">Shapes</g></source>
<target xml:lang="pt"><g id="1">Shapes</g></target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Create a trail</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Create a trail</g></target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en"><g id="1">Tutorial: Lasers and lightning</g></source>
<target xml:lang="pt"><g id="1">Tutorial: Lasers and lightning</g></target>
</trans-unit>
</body>
</file>
</xliff>
