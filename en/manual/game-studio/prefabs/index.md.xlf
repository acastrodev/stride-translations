<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/game-studio/prefabs/index.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Prefabs</source>
<target xml:lang="pt">Prefabs</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/>
<x id="5"/>Designer<x id="6"/></source>
<target xml:lang="pt"><x id="1"/>Beginner<x id="2"/>
<x id="3"/>Programmer<x id="4"/>
<x id="5"/>Designer<x id="6"/></target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">A <g id="1">prefab</g> is a "master" version of an object that you can reuse wherever you need. When you change the prefab, every instance of the prefab changes too.</source>
<target xml:lang="pt">A <g id="1">prefab</g> is a "master" version of an object that you can reuse wherever you need. When you change the prefab, every instance of the prefab changes too.</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">For example, imagine we make a simple tree object by assembling several entities. The entities contain components such as models, materials, physics colliders, and so on, which in turn reference assets.</source>
<target xml:lang="pt">For example, imagine we make a simple tree object by assembling several entities. The entities contain components such as models, materials, physics colliders, and so on, which in turn reference assets.</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">Now imagine we want to place several trees around the scene. We could simply duplicate the tree, but if we want to modify it later, we have to edit each one individually. This is time-consuming and leaves room for mistakes.</source>
<target xml:lang="pt">Now imagine we want to place several trees around the scene. We could simply duplicate the tree, but if we want to modify it later, we have to edit each one individually. This is time-consuming and leaves room for mistakes.</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">The better approach is to make the a tree prefab. Then we can place as many trees as we like, and when we modify the prefab, every tree is instantly updated to match. This saves lots of time.</source>
<target xml:lang="pt">The better approach is to make the a tree prefab. Then we can place as many trees as we like, and when we modify the prefab, every tree is instantly updated to match. This saves lots of time.</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en"><x id="1"/>Creating trees with prefabs<x id="2"/></source>
<target xml:lang="pt"><x id="1"/>Creating trees with prefabs<x id="2"/></target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">The most common use for prefabs is to create a small piece of your scene — like a car, NPC, or item of furniture — and duplicate it as many times as you need. When you need to modify it — for example, if you want to change its model — you can change it in one place and apply the change everywhere at once.</source>
<target xml:lang="pt">The most common use for prefabs is to create a small piece of your scene — like a car, NPC, or item of furniture — and duplicate it as many times as you need. When you need to modify it — for example, if you want to change its model — you can change it in one place and apply the change everywhere at once.</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">You can make any entity or combination of entities of a prefab; they can be as simple or as complex as you need. Prefabs can even contain other prefabs (known as <g id="1">nested prefabs</g>).</source>
<target xml:lang="pt">You can make any entity or combination of entities of a prefab; they can be as simple or as complex as you need. Prefabs can even contain other prefabs (known as <g id="1">nested prefabs</g>).</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">You can <g id="1">override specific properties</g> in each prefab instance.</source>
<target xml:lang="pt">You can <g id="1">override specific properties</g> in each prefab instance.</target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en"><g id="1">Create a prefab</g></source>
<target xml:lang="pt"><g id="1">Create a prefab</g></target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><g id="1">Use prefabs</g></source>
<target xml:lang="pt"><g id="1">Use prefabs</g></target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en"><g id="1">Edit prefabs</g></source>
<target xml:lang="pt"><g id="1">Edit prefabs</g></target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><g id="1">Nested prefabs</g></source>
<target xml:lang="pt"><g id="1">Nested prefabs</g></target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en"><g id="1">Override prefab properties</g></source>
<target xml:lang="pt"><g id="1">Override prefab properties</g></target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en"><g id="1">Prefab models</g></source>
<target xml:lang="pt"><g id="1">Prefab models</g></target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en"><g id="1">Archetypes</g></source>
<target xml:lang="pt"><g id="1">Archetypes</g></target>
</trans-unit>
</body>
</file>
</xliff>
