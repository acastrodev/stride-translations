<?xml version="1.0" encoding="UTF-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:okp="okapi-framework:xliff-extensions" xmlns:its="http://www.w3.org/2005/11/its" xmlns:itsxlf="http://www.w3.org/ns/its-xliff/" its:version="2.0">
<file original="/D:/repos/rr/source/manual/graphics/effects-and-shaders/shading-language/shader-classes-mixins-and-inheritance.md" source-language="en" target-language="pt" datatype="x-text/x-markdown" okp:inputEncoding="UTF-8">
<body>
<trans-unit id="tu1" xml:space="preserve">
<source xml:lang="en">Shader classes, mixins and inheritance</source>
<target xml:lang="pt">Shader classes, mixins and inheritance</target>
</trans-unit>
<trans-unit id="tu2" xml:space="preserve">
<source xml:lang="en">Stride Shading Language (SDSL) is an extension of HLSL, which makes it closer to C# syntax and concepts. The language is object-oriented:</source>
<target xml:lang="pt">Stride Shading Language (SDSL) is an extension of HLSL, which makes it closer to C# syntax and concepts. The language is object-oriented:</target>
</trans-unit>
<trans-unit id="tu3" xml:space="preserve">
<source xml:lang="en">shader classes are the foundation of the code</source>
<target xml:lang="pt">shader classes are the foundation of the code</target>
</trans-unit>
<trans-unit id="tu4" xml:space="preserve">
<source xml:lang="en">shader classes contain methods and members</source>
<target xml:lang="pt">shader classes contain methods and members</target>
</trans-unit>
<trans-unit id="tu5" xml:space="preserve">
<source xml:lang="en">shader classes can be inherited, methods can be overridden</source>
<target xml:lang="pt">shader classes can be inherited, methods can be overridden</target>
</trans-unit>
<trans-unit id="tu6" xml:space="preserve">
<source xml:lang="en">member types can be shader classes</source>
<target xml:lang="pt">member types can be shader classes</target>
</trans-unit>
<trans-unit id="tu7" xml:space="preserve">
<source xml:lang="en">SDSL uses an original way to handle multiple inheritance. Inheritance is performed through mixins, so the order of inheritance is crucial:</source>
<target xml:lang="pt">SDSL uses an original way to handle multiple inheritance. Inheritance is performed through mixins, so the order of inheritance is crucial:</target>
</trans-unit>
<trans-unit id="tu8" xml:space="preserve">
<source xml:lang="en">the order of inheritance defines the actual implementation of a method (the last override)</source>
<target xml:lang="pt">the order of inheritance defines the actual implementation of a method (the last override)</target>
</trans-unit>
<trans-unit id="tu9" xml:space="preserve">
<source xml:lang="en">if a mixin appears several times in the inheritance, only the first occurrence is taken into account (as well as its members and methods)</source>
<target xml:lang="pt">if a mixin appears several times in the inheritance, only the first occurrence is taken into account (as well as its members and methods)</target>
</trans-unit>
<trans-unit id="tu10" xml:space="preserve">
<source xml:lang="en">to can call the previous implementation of a method, use <g id="1">base.&lt;method name>(&lt;arguments>)</g></source>
<target xml:lang="pt">to can call the previous implementation of a method, use <g id="1">base.&lt;method name>(&lt;arguments>)</g></target>
</trans-unit>
<trans-unit id="tu11" xml:space="preserve">
<source xml:lang="en">Keywords</source>
<target xml:lang="pt">Keywords</target>
</trans-unit>
<trans-unit id="tu12" xml:space="preserve">
<source xml:lang="en">SDSL uses the keywords as HLSL, and adds new ones:</source>
<target xml:lang="pt">SDSL uses the keywords as HLSL, and adds new ones:</target>
</trans-unit>
<trans-unit id="tu13" xml:space="preserve">
<source xml:lang="en"><g id="1">stage</g>: method and member keyword. This keyword makes sure the method or member is only defined once and is the same in the compositions.</source>
<target xml:lang="pt"><g id="1">stage</g>: method and member keyword. This keyword makes sure the method or member is only defined once and is the same in the compositions.</target>
</trans-unit>
<trans-unit id="tu14" xml:space="preserve">
<source xml:lang="en"><g id="1">stream</g>: member keyword. The member is accessible at every stage of the shader. For more information, see <g id="2">Automatic shader stage input/out</g>.</source>
<target xml:lang="pt"><g id="1">stream</g>: member keyword. The member is accessible at every stage of the shader. For more information, see <g id="2">Automatic shader stage input/out</g>.</target>
</trans-unit>
<trans-unit id="tu15" xml:space="preserve">
<source xml:lang="en"><g id="1">streams</g>: sort of global structure storing variables needed across several stages of the shader. For more information, see <g id="2">Automatic shader stage input/out</g>.</source>
<target xml:lang="pt"><g id="1">streams</g>: sort of global structure storing variables needed across several stages of the shader. For more information, see <g id="2">Automatic shader stage input/out</g>.</target>
</trans-unit>
<trans-unit id="tu16" xml:space="preserve">
<source xml:lang="en"><g id="1">override</g>: method keyword. If this keyword is missing, the compilation returns an error.</source>
<target xml:lang="pt"><g id="1">override</g>: method keyword. If this keyword is missing, the compilation returns an error.</target>
</trans-unit>
<trans-unit id="tu17" xml:space="preserve">
<source xml:lang="en"><g id="1">abstract</g>: used in front of a method declaration (without a body).</source>
<target xml:lang="pt"><g id="1">abstract</g>: used in front of a method declaration (without a body).</target>
</trans-unit>
<trans-unit id="tu18" xml:space="preserve">
<source xml:lang="en"><g id="1">clone</g>: method keyword. When a method appears several times in the inheritance tree of a shader class, this keyword forces the creation of multiple instances of the method at each level of the inheritance instead of one. For more information, see <g id="2">Composition</g>.</source>
<target xml:lang="pt"><g id="1">clone</g>: method keyword. When a method appears several times in the inheritance tree of a shader class, this keyword forces the creation of multiple instances of the method at each level of the inheritance instead of one. For more information, see <g id="2">Composition</g>.</target>
</trans-unit>
<trans-unit id="tu19" xml:space="preserve">
<source xml:lang="en"><g id="1">Input</g>: for geometry and tessellation shaders. For more information, see <g id="2">Shader stages</g>.</source>
<target xml:lang="pt"><g id="1">Input</g>: for geometry and tessellation shaders. For more information, see <g id="2">Shader stages</g>.</target>
</trans-unit>
<trans-unit id="tu20" xml:space="preserve">
<source xml:lang="en"><g id="1">Output</g>: for geometry and tessellation shaders. For more information, see <g id="2">Shader stages</g>.</source>
<target xml:lang="pt"><g id="1">Output</g>: for geometry and tessellation shaders. For more information, see <g id="2">Shader stages</g>.</target>
</trans-unit>
<trans-unit id="tu21" xml:space="preserve">
<source xml:lang="en"><g id="1">Input2</g>: for tessellation shaders. For more information, see <g id="2">Shader stages</g>.</source>
<target xml:lang="pt"><g id="1">Input2</g>: for tessellation shaders. For more information, see <g id="2">Shader stages</g>.</target>
</trans-unit>
<trans-unit id="tu22" xml:space="preserve">
<source xml:lang="en"><g id="1">Constants</g>: for tessellation shaders. For more information, see <g id="2">Shader stages</g>.</source>
<target xml:lang="pt"><g id="1">Constants</g>: for tessellation shaders. For more information, see <g id="2">Shader stages</g>.</target>
</trans-unit>
<trans-unit id="tu23" xml:space="preserve">
<source xml:lang="en">Abstract methods</source>
<target xml:lang="pt">Abstract methods</target>
</trans-unit>
<trans-unit id="tu24" xml:space="preserve">
<source xml:lang="en">Abstract methods are available in SDSL. They should be prefixed with the <g id="1">abstract</g> keyword. You can inherit from a shader class with abstract methods without having to implement them; the compiler will simply produce a harmless warning. However, you should implement it in your final shader to prevent a compilation error.</source>
<target xml:lang="pt">Abstract methods are available in SDSL. They should be prefixed with the <g id="1">abstract</g> keyword. You can inherit from a shader class with abstract methods without having to implement them; the compiler will simply produce a harmless warning. However, you should implement it in your final shader to prevent a compilation error.</target>
</trans-unit>
<trans-unit id="tu25" xml:space="preserve">
<source xml:lang="en">Annotations</source>
<target xml:lang="pt">Annotations</target>
</trans-unit>
<trans-unit id="tu26" xml:space="preserve">
<source xml:lang="en">Like HLSL, annotations are available in SDSL. Some of the most useful ones are:</source>
<target xml:lang="pt">Like HLSL, annotations are available in SDSL. Some of the most useful ones are:</target>
</trans-unit>
<trans-unit id="tu27" xml:space="preserve">
<source xml:lang="en"><g id="1">[Color]</g> for float4 variables. The ParameterKey will have the type <g id="2">Color4</g> instead of <g id="3">Vector4</g>. It also specifies to Game Studio that this variable should be treated as a color, so you can edit it in Game Studio.</source>
<target xml:lang="pt"><g id="1">[Color]</g> for float4 variables. The ParameterKey will have the type <g id="2">Color4</g> instead of <g id="3">Vector4</g>. It also specifies to Game Studio that this variable should be treated as a color, so you can edit it in Game Studio.</target>
</trans-unit>
<trans-unit id="tu28" xml:space="preserve">
<source xml:lang="en"><g id="1">[Link(...)]</g> specifies which ParameterKey to use to set this value. However, an independent default key is still created.</source>
<target xml:lang="pt"><g id="1">[Link(...)]</g> specifies which ParameterKey to use to set this value. However, an independent default key is still created.</target>
</trans-unit>
<trans-unit id="tu29" xml:space="preserve">
<source xml:lang="en"><g id="1">[Map(...)]</g> specifies which ParameterKey to use to set this value. No new ParameterKey is created.</source>
<target xml:lang="pt"><g id="1">[Map(...)]</g> specifies which ParameterKey to use to set this value. No new ParameterKey is created.</target>
</trans-unit>
<trans-unit id="tu30" xml:space="preserve">
<source xml:lang="en"><g id="1">[RenameLink]</g> prevents the creation of a ParameterKey. It should be used with <g id="2">[Link()]</g>.</source>
<target xml:lang="pt"><g id="1">[RenameLink]</g> prevents the creation of a ParameterKey. It should be used with <g id="2">[Link()]</g>.</target>
</trans-unit>
<trans-unit id="tu31" xml:space="preserve">
<source xml:lang="en">Example code: annotations</source>
<target xml:lang="pt">Example code: annotations</target>
</trans-unit>
<trans-unit id="tu32" xml:space="preserve">
<source xml:lang="en">shader BaseShader
{
	[Color] float4 myColor;
 
	[Link("ProjectKeys.MyTextureKey")]
	[RenameLink]
	Texture2D texture;
 
	[Map("Texturing.Texture0")] Texture2D defaultTexture;
};
</source>
<target xml:lang="pt">shader BaseShader
{
	[Color] float4 myColor;
 
	[Link("ProjectKeys.MyTextureKey")]
	[RenameLink]
	Texture2D texture;
 
	[Map("Texturing.Texture0")] Texture2D defaultTexture;
};
</target>
</trans-unit>
<trans-unit id="tu33" xml:space="preserve">
<source xml:lang="en">Example code: inheritance</source>
<target xml:lang="pt">Example code: inheritance</target>
</trans-unit>
<trans-unit id="tu34" xml:space="preserve">
<source xml:lang="en">shader BaseInterface
{
	abstract float Compute();
};
 
shader BaseShader : BaseInterface
{
	float Compute()
	{
		return 1.0f;
	}
};
 
shader ShaderA : BaseShader
{
	override void Compute()
	{
		return 2.0f;
	}
};
 
shader ShaderB : BaseShader
{
	override void Compute()
	{
		float prevValue = base.Compute();
		return (5.0f + prevValue);
	}
};
</source>
<target xml:lang="pt">shader BaseInterface
{
	abstract float Compute();
};
 
shader BaseShader : BaseInterface
{
	float Compute()
	{
		return 1.0f;
	}
};
 
shader ShaderA : BaseShader
{
	override void Compute()
	{
		return 2.0f;
	}
};
 
shader ShaderB : BaseShader
{
	override void Compute()
	{
		float prevValue = base.Compute();
		return (5.0f + prevValue);
	}
};
</target>
</trans-unit>
<trans-unit id="tu35" xml:space="preserve">
<source xml:lang="en">Example code: the importance of inheritance order</source>
<target xml:lang="pt">Example code: the importance of inheritance order</target>
</trans-unit>
<trans-unit id="tu36" xml:space="preserve">
<source xml:lang="en">Notice what happens when we change the inheritance order between <g id="1">ShaderA</g> and <g id="2">ShaderB</g>.</source>
<target xml:lang="pt">Notice what happens when we change the inheritance order between <g id="1">ShaderA</g> and <g id="2">ShaderB</g>.</target>
</trans-unit>
<trans-unit id="tu37" xml:space="preserve">
<source xml:lang="en">shader MixAB : ShaderA, ShaderB
{
};
 
shader MixBA : ShaderB, ShaderA
{
};
 
// Resulting code (representation)

shader MixAB : BaseInterface, BaseShader, ShaderA, ShaderB
{
	float Compute()
	{
		// code from BaseShader
		float v0 = 1.0f;
 
		// code from ShaderA
		float v1 = 2.0f;
 
		// code from ShaderB
		float prevValue = v1;
		float v2 = 5.0f + prevValue;
 
		return v2; // = 7.0f
	}
};

shader MixBA : BaseInterface, BaseShader, ShaderA, ShaderB
{
	float Compute()
	{
		// code from BaseShader
		float v0 = 1.0f;

		// code from ShaderB
		float prevValue = v0;
		float v1 = 5.0f + prevValue;
		
		// code from ShaderA
		float v2 = 2.0f;

		return v2; // = 2.0f
	}
};
</source>
<target xml:lang="pt">shader MixAB : ShaderA, ShaderB
{
};
 
shader MixBA : ShaderB, ShaderA
{
};
 
// Resulting code (representation)

shader MixAB : BaseInterface, BaseShader, ShaderA, ShaderB
{
	float Compute()
	{
		// code from BaseShader
		float v0 = 1.0f;
 
		// code from ShaderA
		float v1 = 2.0f;
 
		// code from ShaderB
		float prevValue = v1;
		float v2 = 5.0f + prevValue;
 
		return v2; // = 7.0f
	}
};

shader MixBA : BaseInterface, BaseShader, ShaderA, ShaderB
{
	float Compute()
	{
		// code from BaseShader
		float v0 = 1.0f;

		// code from ShaderB
		float prevValue = v0;
		float v1 = 5.0f + prevValue;
		
		// code from ShaderA
		float v2 = 2.0f;

		return v2; // = 2.0f
	}
};
</target>
</trans-unit>
<trans-unit id="tu38" xml:space="preserve">
<source xml:lang="en">Static calls</source>
<target xml:lang="pt">Static calls</target>
</trans-unit>
<trans-unit id="tu39" xml:space="preserve">
<source xml:lang="en">You can also use a variable or call a method from a shader without having to inherit from it. To do this, use <g id="1">&lt;shader_name>.&lt;variable or method_name></g>. It behaves the same way as a static call.</source>
<target xml:lang="pt">You can also use a variable or call a method from a shader without having to inherit from it. To do this, use <g id="1">&lt;shader_name>.&lt;variable or method_name></g>. It behaves the same way as a static call.</target>
</trans-unit>
<trans-unit id="tu40" xml:space="preserve">
<source xml:lang="en">Note that if you statically call a method that uses shader class variables, the shader won't compile. This is a convenient way to only use a part of a shader, but this isn't an optimization. The shader compiler already automatically removes any unnecessary variables.</source>
<target xml:lang="pt">Note that if you statically call a method that uses shader class variables, the shader won't compile. This is a convenient way to only use a part of a shader, but this isn't an optimization. The shader compiler already automatically removes any unnecessary variables.</target>
</trans-unit>
<trans-unit id="tu41" xml:space="preserve">
<source xml:lang="en">Code example: static calls</source>
<target xml:lang="pt">Code example: static calls</target>
</trans-unit>
<trans-unit id="tu42" xml:space="preserve">
<source xml:lang="en">shader StaticClass
{
	float StaticValue;
	float StaticMethod(float a)
	{
		return 2.0f * a;
	}
 
	// this method uses a
	float NonStaticMethod()
	{
		return 2.0f * StaticValue;
	}
};
 
// this shader class is fine
shader CorrectStaticCallClass
{
	float Compute()
	{
		return StaticClass.StaticValue * StaticMethod(5.0f);
	}
};
 
// this shader class won't compile since the call is not static
shader IncorrectStaticCallClass 
{
	float Compute()
	{
		return StaticClass.NonStaticMethod();
	}
};
 
// one way to fix this
shader IncorrectStaticCallClassFixed : StaticClass
{
	float Compute()
	{
		return NonStaticMethod();
	}
};
</source>
<target xml:lang="pt">shader StaticClass
{
	float StaticValue;
	float StaticMethod(float a)
	{
		return 2.0f * a;
	}
 
	// this method uses a
	float NonStaticMethod()
	{
		return 2.0f * StaticValue;
	}
};
 
// this shader class is fine
shader CorrectStaticCallClass
{
	float Compute()
	{
		return StaticClass.StaticValue * StaticMethod(5.0f);
	}
};
 
// this shader class won't compile since the call is not static
shader IncorrectStaticCallClass 
{
	float Compute()
	{
		return StaticClass.NonStaticMethod();
	}
};
 
// one way to fix this
shader IncorrectStaticCallClassFixed : StaticClass
{
	float Compute()
	{
		return NonStaticMethod();
	}
};
</target>
</trans-unit>
<trans-unit id="tu43" xml:space="preserve">
<source xml:lang="en">See also</source>
<target xml:lang="pt">See also</target>
</trans-unit>
<trans-unit id="tu44" xml:space="preserve">
<source xml:lang="en"><g id="1">Effect language</g></source>
<target xml:lang="pt"><g id="1">Effect language</g></target>
</trans-unit>
<trans-unit id="tu45" xml:space="preserve">
<source xml:lang="en"><g id="1">Shading language index</g></source>
<target xml:lang="pt"><g id="1">Shading language index</g></target>
</trans-unit>
<trans-unit id="tu46" xml:space="preserve">
<source xml:lang="en"><g id="1">Composition</g></source>
<target xml:lang="pt"><g id="1">Composition</g></target>
</trans-unit>
<trans-unit id="tu47" xml:space="preserve">
<source xml:lang="en"><g id="1">Templates</g></source>
<target xml:lang="pt"><g id="1">Templates</g></target>
</trans-unit>
<trans-unit id="tu48" xml:space="preserve">
<source xml:lang="en"><g id="1">Shader stage input/output automatic management</g></source>
<target xml:lang="pt"><g id="1">Shader stage input/output automatic management</g></target>
</trans-unit>
<trans-unit id="tu49" xml:space="preserve">
<source xml:lang="en"><g id="1">Shader stages</g></source>
<target xml:lang="pt"><g id="1">Shader stages</g></target>
</trans-unit>
</body>
</file>
</xliff>
